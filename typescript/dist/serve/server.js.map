{"version":3,"sources":["server.ts"],"names":["Server","factories","Map","members","constructor","config","registerFactory","ref","factory","override","get","set","Error","register","input","getFactory","includes","push","registerMany","forEach","item","deregister","removeFromArray","name"],"mappings":";;;;AAuBO,MAAeA,MAAAA,CAAAA;EAvBtB;;;;;EA6BE,OAAuBC,SAAAA,uBAAgBC,GAAAA,EAAAA;AAEvBC,EAAAA,OAAAA;AAEhBC,EAAAA,WAAAA,CAAsBC,MAAiB,EAAA;SAAjBA,MAAAA,GAAAA,MAAAA;AAFNF,IAAAA,IAAAA,CAAAA,OAAAA,GAAoB,EAAA;AAEI;AAExC,EAAA,OAAcG,eAEZC,CAAAA,GAAAA,EACAC,OACAC,EAAAA,QAAAA,GAAW,KACL,EAAA;AACN,IAAA,IAAI,CAAC,IAAKR,CAAAA,SAAAA,CAAUS,GAAIH,CAAAA,GAAAA,KAAQE,QAAU,EAAA;AACxC,MAAKR,IAAAA,CAAAA,SAAAA,CAAUU,GAAIJ,CAAAA,GAAAA,EAAKC,OAAAA,CAAAA;AAC1B,KAAA,MAAA,IAAW,IAAKP,CAAAA,SAAAA,CAAUS,GAAIH,CAAAA,GAAAA,MAASC,OAAS,EAAA;AAC9C,MAAM,MAAA,IAAII,MAAM,CAAgC,8BAAA,CAAA,CAAA;AAClD;AACF;AAEOC,EAAAA,QAAAA,CAASC,KAAqB,EAAA;AAEnC,IAAA,IAAA,CAAKC,WAAWD,KAAAA,CAAAA;AAChB,IAAA,IAAI,CAAC,IAAA,CAAKX,OAAQa,CAAAA,QAAAA,CAASF,KAAAA,CAAQ,EAAA;AACjC,MAAKX,IAAAA,CAAAA,OAAAA,CAAQc,KAAKH,KAAAA,CAAAA;AACpB;AACA,IAAO,OAAA,IAAA;AACT;AAEOI,EAAAA,YAAAA,CAAaJ,KAAuB,EAAA;AACzCA,IAAAA,KAAAA,CAAMK,QAAQ,CAACC,IAAAA,KAAS,IAAKP,CAAAA,QAAAA,CAASO,IAAAA,CAAAA,CAAAA;AACtC,IAAO,OAAA,IAAA;AACT;AAEOC,EAAAA,UAAAA,CAAWP,KAAqB,EAAA;AACrCQ,IAAgB,eAAA,CAAA,IAAA,CAAKnB,SAASW,KAAAA,CAAAA;AAC9B,IAAO,OAAA,IAAA;AACT;AAEUC,EAAAA,UAAAA,CAAWD,KAAiD,EAAA;AACpE,IAAA,MAAMN,OAAW,GAAA,IAAA,CAAKJ,WAA8BH,CAAAA,SAAAA,CAAUS,IAAII,KAAAA,CAAAA;AAClE,IAAA,IAAI,CAACN,OAAS,EAAA;AACZ,MAAA,MAAM,IAAII,KAAM,CAAA,CAAA,0BAAA,EAA6BE,KAAMV,CAAAA,WAAAA,CAAYmB,IAAI,CAAG,CAAA,CAAA,CAAA;AACxE;AACA,IAAOf,OAAAA,OAAAA;AACT;AAGF","file":"server.js","sourcesContent":["/**\n * Copyright 2025 Â© BeeAI a Series of LF Projects, LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { removeFromArray } from \"@/internals/helpers/array.js\";\n\ntype ServerFactory<TInput, TInternal> = (input: TInput) => Promise<TInternal>;\nexport type FactoryMember<TInput> = abstract new (\n  ...args: any[]\n) => TInput | (new (...args: any[]) => TInput) | ((...args: any[]) => TInput);\n\nexport abstract class Server<\n  TInput extends object = object,\n  TInternal extends object = object,\n  TConfig extends object = object,\n> {\n  // @ts-expect-error\n  public static readonly factories = new Map<object, ServerFactory<TInput, TInternal>>();\n\n  public readonly members: TInput[] = [];\n\n  constructor(protected config: TConfig) {}\n\n  public static registerFactory<TInput2 extends object, TInternal2 extends object>(\n    this: typeof Server<TInput2, TInternal2, any>,\n    ref: FactoryMember<TInput2>,\n    factory: ServerFactory<TInput2, TInternal2>,\n    override = false,\n  ): void {\n    if (!this.factories.get(ref) || override) {\n      this.factories.set(ref, factory);\n    } else if (this.factories.get(ref) !== factory) {\n      throw new Error(`Factory is already registered.`);\n    }\n  }\n\n  public register(input: TInput): this {\n    // check if the type has a factory registered\n    this.getFactory(input);\n    if (!this.members.includes(input)) {\n      this.members.push(input);\n    }\n    return this;\n  }\n\n  public registerMany(input: TInput[]): this {\n    input.forEach((item) => this.register(item));\n    return this;\n  }\n\n  public deregister(input: TInput): this {\n    removeFromArray(this.members, input);\n    return this;\n  }\n\n  protected getFactory(input: TInput): ServerFactory<TInput, TInternal> {\n    const factory = (this.constructor as typeof Server).factories.get(input);\n    if (!factory) {\n      throw new Error(`No factory registered for ${input.constructor.name}.`);\n    }\n    return factory;\n  }\n\n  public abstract serve(): void;\n}\n"]}