{"version":3,"sources":["agent.ts"],"names":["ToolCallingAgent","BaseAgent","emitter","constructor","input","Emitter","root","child","namespace","creator","saveIntermediateSteps","register","_run","options","run","tempMessageKey","execution","totalMaxRetries","omitUndefined","state","memory","UnconstrainedMemory","result","undefined","iteration","add","SystemMessage","templates","system","render","role","instructions","addMany","messages","prompt","userMessage","UserMessage","task","context","expectedOutput","isString","globalRetriesCounter","RetryCounter","AgentError","usePlainResponse","ZodSchema","finalAnswerToolSchema","z","object","response","string","describe","String","finalAnswerTool","DynamicTool","name","description","inputSchema","handler","JSON","stringify","AssistantMessage","StringToolOutput","tools","forceFinalAnswer","Infinity","emit","llm","create","slice","toolChoice","length","stream","toolCallMessages","getToolCalls","toolCall","tool","find","toolName","toolInput","args","toolResponse","toolCallMsg","ToolMessage","type","toolCallId","getTextContent","isError","e","ToolError","use","explain","textMessages","getTextMessages","isEmpty","deleteMany","filter","msg","meta","push","reset","extraDescription","map","join","overrides","defaultTemplates","ToolCallingAgentSystemPrompt","ToolCallingAgentTaskPrompt","mapObj","key","defaultTemplate","override","PromptTemplate","createSnapshot","shallowCopy","enumerable"],"mappings":"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","file":"agent.js","sourcesContent":["/**\n * Copyright 2025 Â© BeeAI a Series of LF Projects, LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { AgentError, BaseAgent } from \"@/agents/base.js\";\nimport { AnyTool, DynamicTool, StringToolOutput, ToolError, ToolOutput } from \"@/tools/base.js\";\nimport { BaseMemory } from \"@/memory/base.js\";\nimport { AgentMeta } from \"@/agents/types.js\";\nimport { Emitter } from \"@/emitter/emitter.js\";\nimport type {\n  ToolCallingAgentExecutionConfig,\n  ToolCallingAgentTemplates,\n  ToolCallingAgentCallbacks,\n  ToolCallingAgentRunInput,\n  ToolCallingAgentRunOptions,\n  ToolCallingAgentRunOutput,\n  ToolCallingAgentRunState,\n} from \"@/agents/toolCalling/types.js\";\nimport { GetRunContext } from \"@/context.js\";\nimport { ChatModel } from \"@/backend/chat.js\";\nimport { shallowCopy } from \"@/serializer/utils.js\";\nimport { UnconstrainedMemory } from \"@/memory/unconstrainedMemory.js\";\nimport { AssistantMessage, SystemMessage, ToolMessage, UserMessage } from \"@/backend/message.js\";\nimport { isEmpty, isString } from \"remeda\";\nimport { RetryCounter } from \"@/internals/helpers/counter.js\";\nimport { mapObj, omitUndefined } from \"@/internals/helpers/object.js\";\nimport { Cache } from \"@/cache/decoratorCache.js\";\nimport { PromptTemplate } from \"@/template.js\";\nimport {\n  ToolCallingAgentSystemPrompt,\n  ToolCallingAgentTaskPrompt,\n} from \"@/agents/toolCalling/prompts.js\";\nimport { z, ZodSchema } from \"zod\";\n\nexport type ToolCallingAgentTemplateFactory<K extends keyof ToolCallingAgentTemplates> = (\n  template: ToolCallingAgentTemplates[K],\n) => ToolCallingAgentTemplates[K];\n\nexport interface ToolCallingAgentInput {\n  llm: ChatModel;\n  memory: BaseMemory;\n  tools: AnyTool[];\n  meta?: Omit<AgentMeta, \"tools\">;\n  templates?: Partial<{\n    [K in keyof ToolCallingAgentTemplates]:\n      | ToolCallingAgentTemplates[K]\n      | ToolCallingAgentTemplateFactory<K>;\n  }>;\n  execution?: ToolCallingAgentExecutionConfig;\n  saveIntermediateSteps?: boolean;\n}\n\nexport class ToolCallingAgent extends BaseAgent<\n  ToolCallingAgentRunInput,\n  ToolCallingAgentRunOutput,\n  ToolCallingAgentRunOptions\n> {\n  public readonly emitter = Emitter.root.child<ToolCallingAgentCallbacks>({\n    namespace: [\"agent\", \"toolCalling\"],\n    creator: this,\n  });\n\n  constructor(public readonly input: ToolCallingAgentInput) {\n    super();\n    this.input.saveIntermediateSteps = this.input.saveIntermediateSteps ?? true;\n  }\n\n  static {\n    this.register();\n  }\n\n  protected async _run(\n    input: ToolCallingAgentRunInput,\n    options: ToolCallingAgentRunOptions = {},\n    run: GetRunContext<typeof this>,\n  ): Promise<ToolCallingAgentRunOutput> {\n    const tempMessageKey = \"tempMessage\" as const;\n    const execution = {\n      maxRetriesPerStep: 3,\n      totalMaxRetries: 20,\n      maxIterations: 10,\n      ...omitUndefined(this.input.execution ?? {}),\n      ...omitUndefined(options.execution ?? {}),\n    };\n\n    const state: ToolCallingAgentRunState = {\n      memory: new UnconstrainedMemory(),\n      result: undefined,\n      iteration: 0,\n    };\n    await state.memory.add(\n      new SystemMessage(\n        this.templates.system.render({\n          role: undefined,\n          instructions: undefined,\n        }),\n      ),\n    );\n    await state.memory.addMany(this.memory.messages);\n\n    if (input.prompt) {\n      const userMessage = new UserMessage(\n        this.templates.task.render({\n          prompt: input.prompt,\n          context: input.context,\n          expectedOutput: isString(input.expectedOutput) ? input.expectedOutput : undefined,\n        }),\n      );\n      await state.memory.add(userMessage);\n    }\n\n    const globalRetriesCounter = new RetryCounter(execution.totalMaxRetries || 1, AgentError);\n\n    const usePlainResponse = !input.expectedOutput || !(input.expectedOutput instanceof ZodSchema);\n    const finalAnswerToolSchema = usePlainResponse\n      ? z.object({\n          response: z.string().describe(String(input.expectedOutput ?? \"\")),\n        })\n      : (input.expectedOutput as ZodSchema);\n\n    const finalAnswerTool = new DynamicTool({\n      name: \"final_answer\",\n      description: \"Sends the final answer to the user\",\n      inputSchema: finalAnswerToolSchema,\n      handler: async (input) => {\n        const result = usePlainResponse ? input.response : JSON.stringify(input);\n        state.result = new AssistantMessage(result);\n        return new StringToolOutput(\"Message has been sent\");\n      },\n    });\n\n    const tools = [...this.input.tools, finalAnswerTool];\n    let forceFinalAnswer = false;\n\n    while (!state.result) {\n      state.iteration++;\n      if (state.iteration > (execution.totalMaxRetries ?? Infinity)) {\n        throw new AgentError(\n          `Agent was not able to resolve the task in ${state.iteration} iterations.`,\n        );\n      }\n\n      await run.emitter.emit(\"start\", { state });\n      const response = await this.input.llm.create({\n        messages: state.memory.messages.slice(),\n        tools,\n        toolChoice: forceFinalAnswer ? finalAnswerTool : tools.length > 1 ? \"required\" : tools[0],\n        stream: false,\n      });\n      await state.memory.addMany(response.messages);\n\n      const toolCallMessages = response.getToolCalls();\n      for (const toolCall of toolCallMessages) {\n        try {\n          const tool = tools.find((tool) => tool.name === toolCall.toolName);\n          if (!tool) {\n            throw new AgentError(`Tool ${toolCall.toolName} does not exist!`);\n          }\n\n          const toolInput: any = toolCall.args;\n          const toolResponse: ToolOutput = await tool.run(toolInput).context({\n            state,\n            toolCallMsg: toolCall,\n          });\n          await state.memory.add(\n            new ToolMessage({\n              type: \"tool-result\",\n              toolCallId: toolCall.toolCallId,\n              toolName: toolCall.toolName,\n              result: toolResponse.getTextContent(),\n              isError: false,\n            }),\n          );\n        } catch (e) {\n          if (e instanceof ToolError) {\n            globalRetriesCounter.use(e);\n            await state.memory.add(\n              new ToolMessage({\n                type: \"tool-result\",\n                toolCallId: toolCall.toolCallId,\n                toolName: toolCall.toolName,\n                result: e.explain(),\n                isError: true,\n              }),\n            );\n          } else {\n            throw e;\n          }\n        }\n      }\n\n      // handle empty messages for some models\n      const textMessages = response.getTextMessages();\n      if (isEmpty(toolCallMessages) && isEmpty(textMessages)) {\n        await state.memory.add(new AssistantMessage(\"\\n\", { [tempMessageKey]: true }));\n      } else {\n        await state.memory.deleteMany(\n          state.memory.messages.filter((msg) => msg.meta[tempMessageKey]),\n        );\n      }\n\n      // Fallback for providers that do not support structured outputs\n      if (!isEmpty(textMessages) && isEmpty(toolCallMessages)) {\n        forceFinalAnswer = true;\n        tools.length = 0;\n        tools.push(finalAnswerTool);\n      }\n\n      await run.emitter.emit(\"success\", { state });\n    }\n\n    if (this.input.saveIntermediateSteps) {\n      this.memory.reset();\n      await this.memory.addMany(state.memory.messages.slice(1));\n    } else {\n      await this.memory.addMany(state.memory.messages.slice(-2));\n    }\n    return { memory: state.memory, result: state.result };\n  }\n\n  get meta(): AgentMeta {\n    const tools = this.input.tools.slice();\n\n    if (this.input.meta) {\n      return { ...this.input.meta, tools };\n    }\n\n    return {\n      name: \"ToolCalling\",\n      tools,\n      description: \"ToolCallingAgent that uses tools to accomplish the task.\",\n      ...(tools.length > 0 && {\n        extraDescription: [\n          `Tools that I can use to accomplish given task.`,\n          ...tools.map((tool) => `Tool '${tool.name}': ${tool.description}.`),\n        ].join(\"\\n\"),\n      }),\n    };\n  }\n\n  @Cache({ enumerable: false })\n  protected get templates(): ToolCallingAgentTemplates {\n    const overrides = this.input.templates ?? {};\n    const defaultTemplates: ToolCallingAgentTemplates = {\n      system: ToolCallingAgentSystemPrompt,\n      task: ToolCallingAgentTaskPrompt,\n    } as const;\n\n    return mapObj(defaultTemplates)(\n      (key, defaultTemplate: ToolCallingAgentTemplates[typeof key]) => {\n        const override = overrides[key] ?? defaultTemplate;\n        if (override instanceof PromptTemplate) {\n          return override;\n        }\n        return override(defaultTemplate) ?? defaultTemplate;\n      },\n    );\n  }\n\n  createSnapshot() {\n    return {\n      ...super.createSnapshot(),\n      input: shallowCopy(this.input),\n      emitter: this.emitter,\n    };\n  }\n\n  set memory(memory: BaseMemory) {\n    this.input.memory = memory;\n  }\n\n  get memory() {\n    return this.input.memory;\n  }\n}\n"]}