{"version":3,"sources":["agent.ts"],"names":["StreamlitAgent","BaseAgent","emitter","constructor","input","Emitter","namespace","creator","meta","name","tools","description","memory","_run","_options","run","userMessage","runMemory","prepare","content","raw","llm","create","stream","messages","abortSignal","signal","observe","on","value","chunk","delta","getTextContent","emit","state","result","parse","assistantMessage","AssistantMessage","addMany","filter","isTruthy","message","systemMessage","SystemMessage","templates","system","StreamlitAgentSystemPrompt","render","prompt","isEmpty","UserMessage","createdAt","Date","inputMessages","TokenMemory","capacityThreshold","syncThreshold","handlers","removalSelector","msgs","prevConversationMsg","find","msg","includes","last","lastMsg","length","m","role","Role","ASSISTANT","AgentError","blocks","i","text","substring","code","findFirstPair","allowOverlap","push","start","end","inner","createSnapshot"],"mappings":";;;;;;;;;;;;AAqEO,MAAMA,uBAAuBC,kBAAAA,CAAAA;EArEpC;;;;AAsESC,EAAAA,OAAAA;AAKPC,EAAAA,WAAAA,CAA+BC,KAA4B,EAAA;AACzD,IAAA,KAAA,IAAK,IADwBA,CAAAA,KAAAA,GAAAA,OAAAA,IALxBF,CAAAA,OAAAA,GAAU,IAAIG,mBAAyB,CAAA;MAC5CC,SAAW,EAAA;AAAC,QAAA,OAAA;AAAS,QAAA,cAAA;AAAgB,QAAA;;MACrCC,OAAS,EAAA;KACX,CAAA;AAIA;AAEA,EAAA,IAAWC,IAAkB,GAAA;AAC3B,IAAO,OAAA;MACLC,IAAM,EAAA,CAAA,SAAA,CAAA;AACNC,MAAAA,KAAAA,EAAO,EAAA;MACPC,WAAa,EAAA,CAAA,iLAAA;AACf,KAAA;AACF;AAEA,EAAA,IAAIC,OAAOA,MAAoB,EAAA;AAC7B,IAAA,IAAA,CAAKR,MAAMQ,MAASA,GAAAA,MAAAA;AACtB;AAEA,EAAA,IAAWA,MAAS,GAAA;AAClB,IAAA,OAAO,KAAKR,KAAMQ,CAAAA,MAAAA;AACpB;EAEA,MAAgBC,IAAAA,CACdT,KACAU,EAAAA,QAAAA,EACAC,GAC6B,EAAA;AAC7B,IAAA,MAAM,EAAEC,WAAaC,EAAAA,SAAAA,KAAc,MAAM,IAAA,CAAKC,QAAQd,KAAAA,CAAAA;AAEtD,IAAA,IAAIe,OAAU,GAAA,EAAA;AACd,IAAA,MAAMC,GAAM,GAAA,MAAM,IAAKhB,CAAAA,KAAAA,CAAMiB,IAC1BC,MAAO,CAAA;MACNC,MAAQ,EAAA,IAAA;AACRC,MAAAA,QAAAA,EAAUP,SAAUO,CAAAA,QAAAA;AACpBC,MAAAA,WAAAA,EAAaV,GAAIW,CAAAA;KACnB,CAAA,CACCC,OAAQ,CAAA,CAACzB,OAAAA,KAAAA;AACRA,MAAAA,OAAAA,CAAQ0B,GAAG,UAAY,EAAA,OAAO,EAAEC,KAAAA,EAAOC,OAAO,KAAA;AAC5C,QAAMC,MAAAA,KAAAA,GAAQD,MAAME,cAAc,EAAA;AAClC,QAAA,IAAID,KAAO,EAAA;AACTZ,UAAWY,OAAAA,IAAAA,KAAAA;AACX,UAAMhB,MAAAA,GAAAA,CAAIb,OAAQ+B,CAAAA,IAAAA,CAAK,UAAY,EAAA;AAAEF,YAAAA,KAAAA;YAAOG,KAAO,EAAA;AAAEf,cAAAA;AAAQ,aAAA;AAAGW,YAAAA;WAAM,CAAA;AACxE;OACF,CAAA;KACF,CAAA;AACF,IAAA,MAAMK,SAAS,IAAKC,CAAAA,KAAAA,CAAMjB,OAAWC,IAAAA,GAAAA,CAAIY,gBAAc,CAAA;AAEvD,IAAMK,MAAAA,gBAAAA,GAAmB,IAAIC,4BAAAA,CAAiBnB,OAAAA,CAAAA;AAC9C,IAAM,MAAA,IAAA,CAAKP,OAAO2B,OAAQ,CAAA;AAACvB,MAAAA,WAAAA;AAAaqB,MAAAA;AAAkBG,KAAAA,CAAAA,MAAAA,CAAOC,eAAAA,CAAAA,CAAAA;AAEjE,IAAO,OAAA;AACLN,MAAAA,MAAAA;MACAO,OAASL,EAAAA,gBAAAA;MACTzB,MAAQK,EAAAA;AACV,KAAA;AACF;AAEA,EAAA,MAAgBC,QAAQd,KAA0B,EAAA;AAChD,IAAMuC,MAAAA,aAAAA,GAAgB,IAAIC,yBAAAA,CAAAA,CACvB,IAAKxC,CAAAA,KAAAA,CAAMyC,SAAWC,EAAAA,MAAAA,IAAUC,sCAA4BC,EAAAA,MAAAA,CAAO,EAAC,CAAA,CAAA;AAGvE,IAAA,MAAMhC,WACJZ,GAAAA,KAAAA,CAAM6C,MAAW,KAAA,IAAA,IAAQ,IAAKrC,CAAAA,MAAAA,CAAOsC,OAAO,EAAA,GACxC,IAAIC,uBAAAA,CAAY/C,KAAM6C,CAAAA,MAAAA,IAAU,aAAe,EAAA;AAAEG,MAAAA,SAAAA,sBAAeC,IAAAA;AAAO,KAAA,CACvE,GAAA,IAAA;AAEN,IAAA,MAAMC,aAAgB,GAAA;AAAI,MAAA,GAAA,IAAA,CAAK1C,MAAOY,CAAAA,QAAAA;AAAUR,MAAAA;AAAawB,KAAAA,CAAAA,MAAAA,CAAOC,eAAAA,CAAAA;AAEpE,IAAMxB,MAAAA,SAAAA,GAAY,IAAIsC,2BAAY,CAAA;MAChCC,iBAAmB,EAAA,IAAA;MACnBC,aAAe,EAAA,GAAA;MACfC,QAAU,EAAA;AACRC,QAAAA,eAAAA,CAAgBC,IAAI,EAAA;AAElB,UAAMC,MAAAA,mBAAAA,GAAsBD,KAAKE,IAAK,CAAA,CAACC,QAAQT,aAAcU,CAAAA,QAAAA,CAASD,GAAAA,CAAAA,CAAAA;AACtE,UAAA,IAAIF,mBAAuBA,IAAAA,mBAAAA,KAAwBI,WAAKX,CAAAA,aAAAA,CAAgB,EAAA;AACtE,YAAOO,OAAAA,mBAAAA;AACT;AAEA,UAAMK,MAAAA,OAAAA,GAAUN,IAAKO,CAAAA,MAAAA,GAAS,CAAKP,IAAAA,IAAAA,CAAKE,IAAK,CAAA,CAACM,CAAMA,KAAAA,CAAAA,CAAEC,IAASC,KAAAA,gBAAAA,CAAKC,SAAS,CAAA;AAC7E,UAAA,IAAI,CAACL,OAAS,EAAA;AACZ,YAAM,MAAA,IAAIM,oBAAW,8DAAA,CAAA;AACvB;AACA,UAAON,OAAAA,OAAAA;AACT;AACF;KACF,CAAA;AACA,IAAA,MAAMjD,UAAUsB,OAAQ,CAAA;AAACI,MAAAA,aAAAA;AAAkBW,MAAAA,GAAAA;AAAed,KAAAA,CAAAA,MAAAA,CAAOC,eAAAA,CAAAA,CAAAA;AAEjE,IAAO,OAAA;AAAExB,MAAAA,SAAAA;AAAWD,MAAAA;AAAY,KAAA;AAClC;AAEUoB,EAAAA,KAAAA,CAAMhB,GAAqB,EAAA;AACnC,IAAA,MAAMqD,SAAkB,EAAA;AAExB,IAAA,KAAA,IAASC,CAAI,GAAA,CAAA,EAAGA,CAAItD,GAAAA,GAAAA,CAAI+C,MAAU,IAAA;AAChC,MAAMQ,MAAAA,IAAAA,GAAOvD,GAAIwD,CAAAA,SAAAA,CAAUF,CAAAA,CAAAA;AAE3B,MAAMG,MAAAA,IAAAA,GAAOC,yBAAcH,IAAM,EAAA;AAAC,QAAA,iBAAA;AAAmB,QAAA;AAAU,OAAA,EAAA;QAAEI,YAAc,EAAA;OAAK,CAAA;AACpF,MAAA,IAAI,CAACF,IAAM,EAAA;AACTJ,QAAAA,MAAAA,CAAOO,IAAK,CAAA;UAAEC,KAAOP,EAAAA,CAAAA;AAAGQ,UAAAA,GAAAA,EAAKR,IAAIC,IAAKR,CAAAA,MAAAA;UAAQhD,OAASwD,EAAAA,IAAAA;UAAMlE,IAAM,EAAA;SAAO,CAAA;AAC1E,QAAA;AACF;AAEA,MAAIoE,IAAAA,IAAAA,CAAKI,QAAQ,CAAG,EAAA;AAClBR,QAAAA,MAAAA,CAAOO,IAAK,CAAA;UACVvE,IAAM,EAAA,MAAA;UACNwE,KAAOP,EAAAA,CAAAA;AACPQ,UAAAA,GAAAA,EAAKR,IAAIG,IAAKI,CAAAA,KAAAA;AACd9D,UAAAA,OAAAA,EAASwD,IAAKC,CAAAA,SAAAA,CAAU,CAAGC,EAAAA,IAAAA,CAAKI,KAAK;SACvC,CAAA;AACF;AACAR,MAAAA,MAAAA,CAAOO,IAAK,CAAA;QACVvE,IAAM,EAAA,KAAA;AACNU,QAAAA,OAAAA,EAAS0D,IAAKM,CAAAA,KAAAA;AACdF,QAAAA,KAAAA,EAAOP,IAAIG,IAAKI,CAAAA,KAAAA;AAChBC,QAAAA,GAAAA,EAAKR,IAAIG,IAAKK,CAAAA;OAChB,CAAA;AACAR,MAAAA,CAAAA,IAAKG,IAAKK,CAAAA,GAAAA;AACZ;AAEA,IAAO,OAAA;AACL9D,MAAAA,GAAAA;AACAqD,MAAAA;AACF,KAAA;AACF;EAEAW,cAAiB,GAAA;AACf,IAAO,OAAA;AACL,MAAA,GAAG,MAAMA,cAAAA,EAAAA;AACThF,MAAAA,KAAAA,EAAO,IAAKA,CAAAA;AACd,KAAA;AACF;AACF","file":"agent.cjs","sourcesContent":["/**\n * Copyright 2025 Â© BeeAI a Series of LF Projects, LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { AgentError, BaseAgent, BaseAgentRunOptions } from \"@/agents/base.js\";\nimport { AgentMeta } from \"@/agents/types.js\";\nimport { GetRunContext } from \"@/context.js\";\nimport { Callback, Emitter } from \"@/emitter/emitter.js\";\nimport { BaseMemory } from \"@/memory/base.js\";\nimport { isTruthy, last } from \"remeda\";\nimport { AssistantMessage, Message, Role, SystemMessage, UserMessage } from \"@/backend/message.js\";\nimport {\n  StreamlitAgentSystemPrompt,\n  StreamlitAgentTemplates,\n} from \"@/agents/experimental/streamlit/prompts.js\";\nimport { TokenMemory } from \"@/memory/tokenMemory.js\";\nimport { findFirstPair } from \"@/internals/helpers/string.js\";\nimport { ChatModel, ChatModelOutput } from \"@/backend/chat.js\";\n\nexport interface StreamlitAgentInput {\n  llm: ChatModel;\n  memory: BaseMemory;\n  templates?: Partial<StreamlitAgentTemplates>;\n}\n\nexport interface StreamlitRunInput {\n  prompt: string | null;\n}\n\ninterface Block {\n  name: \"text\" | \"app\";\n  content: string;\n  start: number;\n  end: number;\n}\n\ninterface Result {\n  raw: string;\n  blocks: Block[];\n}\n\nexport interface StreamlitRunOutput {\n  result: Result;\n  message: Message;\n  memory: BaseMemory;\n}\n\nexport interface StreamlitEvents {\n  newToken: Callback<{\n    delta: string;\n    state: Readonly<{\n      content: string;\n    }>;\n    chunk: ChatModelOutput;\n  }>;\n}\n\nexport class StreamlitAgent extends BaseAgent<StreamlitRunInput, StreamlitRunOutput> {\n  public emitter = new Emitter<StreamlitEvents>({\n    namespace: [\"agent\", \"experimental\", \"streamlit\"],\n    creator: this,\n  });\n\n  constructor(protected readonly input: StreamlitAgentInput) {\n    super();\n  }\n\n  public get meta(): AgentMeta {\n    return {\n      name: `Streamlit`,\n      tools: [],\n      description: `StreamlitAgent is an experimental meta-app agent that uses \\`Meta LLaMa 3.1 70B\\` to build \\`IBM Granite 3 8B\\`-powered apps using Streamlit -- a simple UI framework for Python.`,\n    };\n  }\n\n  set memory(memory: BaseMemory) {\n    this.input.memory = memory;\n  }\n\n  public get memory() {\n    return this.input.memory;\n  }\n\n  protected async _run(\n    input: StreamlitRunInput,\n    _options: BaseAgentRunOptions,\n    run: GetRunContext<typeof this>,\n  ): Promise<StreamlitRunOutput> {\n    const { userMessage, runMemory } = await this.prepare(input);\n\n    let content = \"\";\n    const raw = await this.input.llm\n      .create({\n        stream: true,\n        messages: runMemory.messages,\n        abortSignal: run.signal,\n      })\n      .observe((emitter) => {\n        emitter.on(\"newToken\", async ({ value: chunk }) => {\n          const delta = chunk.getTextContent();\n          if (delta) {\n            content += delta;\n            await run.emitter.emit(\"newToken\", { delta, state: { content }, chunk });\n          }\n        });\n      });\n    const result = this.parse(content || raw.getTextContent());\n\n    const assistantMessage = new AssistantMessage(content);\n    await this.memory.addMany([userMessage, assistantMessage].filter(isTruthy));\n\n    return {\n      result,\n      message: assistantMessage,\n      memory: runMemory,\n    };\n  }\n\n  protected async prepare(input: StreamlitRunInput) {\n    const systemMessage = new SystemMessage(\n      (this.input.templates?.system ?? StreamlitAgentSystemPrompt).render({}),\n    );\n\n    const userMessage =\n      input.prompt !== null || this.memory.isEmpty()\n        ? new UserMessage(input.prompt ?? \"No message.\", { createdAt: new Date() })\n        : null;\n\n    const inputMessages = [...this.memory.messages, userMessage].filter(isTruthy);\n\n    const runMemory = new TokenMemory({\n      capacityThreshold: 0.85,\n      syncThreshold: 0.6,\n      handlers: {\n        removalSelector(msgs) {\n          // First we remove messages from the past conversations\n          const prevConversationMsg = msgs.find((msg) => inputMessages.includes(msg));\n          if (prevConversationMsg && prevConversationMsg !== last(inputMessages)) {\n            return prevConversationMsg;\n          }\n\n          const lastMsg = msgs.length > 3 && msgs.find((m) => m.role === Role.ASSISTANT);\n          if (!lastMsg) {\n            throw new AgentError(\"Cannot fit the current conversation into the context window!\");\n          }\n          return lastMsg;\n        },\n      },\n    });\n    await runMemory.addMany([systemMessage, ...inputMessages].filter(isTruthy));\n\n    return { runMemory, userMessage };\n  }\n\n  protected parse(raw: string): Result {\n    const blocks: Block[] = [];\n\n    for (let i = 0; i < raw.length; ) {\n      const text = raw.substring(i);\n\n      const code = findFirstPair(text, [\"```python-app\\n\", \"\\n```\"], { allowOverlap: true });\n      if (!code) {\n        blocks.push({ start: i, end: i + text.length, content: text, name: \"text\" });\n        break;\n      }\n\n      if (code.start > 0) {\n        blocks.push({\n          name: \"text\",\n          start: i,\n          end: i + code.start,\n          content: text.substring(0, code.start),\n        });\n      }\n      blocks.push({\n        name: \"app\",\n        content: code.inner,\n        start: i + code.start,\n        end: i + code.end,\n      });\n      i += code.end;\n    }\n\n    return {\n      raw,\n      blocks,\n    };\n  }\n\n  createSnapshot() {\n    return {\n      ...super.createSnapshot(),\n      input: this.input,\n    };\n  }\n}\n"]}