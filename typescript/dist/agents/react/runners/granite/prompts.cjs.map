{"version":3,"sources":["prompts.ts"],"names":["GraniteReActAgentAssistantPrompt","ReActAgentAssistantPrompt","fork","config","template","GraniteReActAgentSystemPrompt","ReActAgentSystemPrompt","defaults","instructions","functions","formatDate","date","createdAt","Date","Intl","DateTimeFormat","dateStyle","timeStyle","format","GraniteReActAgentSchemaErrorPrompt","ReActAgentSchemaErrorPrompt","GraniteReActAgentUserPrompt","ReActAgentUserPrompt","GraniteReActAgentToolNotFoundPrompt","ReActAgentToolNotFoundPrompt","GraniteReActAgentToolErrorPrompt","ReActAgentToolErrorPrompt","GraniteReActAgentToolInputErrorPrompt","ReActAgentToolInputErrorPrompt"],"mappings":";;;;AA0BO,MAAMA,gCAAmCC,GAAAA,qCAAAA,CAA0BC,IAAK,CAAA,CAACC,MAAAA,KAAAA;AAC9EA,EAAAA,MAAAA,CAAOC,QAAW,GAAA,CAAA;;;;AACpB,CAAA;AAEO,MAAMC,6BAAgCC,GAAAA,kCAAAA,CAAuBJ,IAAK,CAAA,CAACC,MAAAA,KAAAA;AACxEA,EAAAA,MAAAA,CAAOI,SAASC,YAAe,GAAA,EAAA;AAC/BL,EAAOM,MAAAA,CAAAA,SAAAA,CAAUC,aAAa,WAAA;AAC5B,IAAMC,MAAAA,IAAAA,GAAO,KAAKC,SAAY,GAAA,IAAIC,KAAK,IAAKD,CAAAA,SAAS,CAAI,mBAAA,IAAIC,IAAAA,EAAAA;AAC7D,IAAO,OAAA,IAAIC,IAAKC,CAAAA,cAAAA,CAAe,OAAS,EAAA;MACtCC,SAAW,EAAA,MAAA;MACXC,SAAW,EAAA;KACb,CAAA,CAAGC,OAAOP,IAAAA,CAAAA;AACZ,GAAA;AACAR,EAAAA,MAAAA,CAAOC,QAAW,GAAA,CAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAyCpB,CAAA;AAEO,MAAMe,kCAAqCC,GAAAA,uCAAAA,CAA4BlB,IAAK,CAAA,CAACC,MAAAA,KAAAA;AAClFA,EAAAA,MAAAA,CAAOC,QAAW,GAAA,CAAA;;AAEpB,CAAA;AAEO,MAAMiB,2BAA8BC,GAAAA,gCAAAA,CAAqBpB,IAAK,CAAA,CAACC,MAAAA,KAAAA;AACpEA,EAAAA,MAAAA,CAAOC,QAAW,GAAA,CAAA,SAAA,CAAA;AACpB,CAAA;AAEO,MAAMmB,mCAAsCC,GAAAA,wCAAAA,CAA6BtB,IAAK,CAAA,CAACC,MAAAA,KAAAA;AACpFA,EAAAA,MAAAA,CAAOC,QAAW,GAAA,CAAA;;;;AAIpB,CAAA;AAEO,MAAMqB,gCAAmCC,GAAAA,qCAAAA,CAA0BxB,IAAK,CAAA,CAACC,MAAAA,KAAAA;AAC9EA,EAAAA,MAAAA,CAAOC,QAAW,GAAA,CAAA;;;AAGpB,CAAA;AAEO,MAAMuB,qCAAwCC,GAAAA,0CAAAA,CAA+B1B,IAClF,CAAA,CAACC,MAAAA,KAAAA;AACCA,EAAAA,MAAAA,CAAOC,QAAW,GAAA,CAAA;;;AAGpB,CAAA","file":"prompts.cjs","sourcesContent":["/**\n * Copyright 2025 Â© BeeAI a Series of LF Projects, LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  ReActAgentAssistantPrompt,\n  ReActAgentSchemaErrorPrompt,\n  ReActAgentSystemPrompt,\n  ReActAgentToolErrorPrompt,\n  ReActAgentToolInputErrorPrompt,\n  ReActAgentToolNotFoundPrompt,\n  ReActAgentUserPrompt,\n} from \"@/agents/react/prompts.js\";\n\nexport const GraniteReActAgentAssistantPrompt = ReActAgentAssistantPrompt.fork((config) => {\n  config.template = `{{#thought}}Thought: {{.}}\\n{{/thought}}{{#toolName}}Tool Name: {{.}}\\n{{/toolName}}{{#toolInput}}Tool Input: {{.}}\\n{{/toolInput}}{{#finalAnswer}}Final Answer: {{.}}{{/finalAnswer}}`;\n});\n\nexport const GraniteReActAgentSystemPrompt = ReActAgentSystemPrompt.fork((config) => {\n  config.defaults.instructions = \"\";\n  config.functions.formatDate = function () {\n    const date = this.createdAt ? new Date(this.createdAt) : new Date();\n    return new Intl.DateTimeFormat(\"en-US\", {\n      dateStyle: \"full\",\n      timeStyle: \"medium\",\n    }).format(date);\n  };\n  config.template = `You are an AI assistant.\nWhen the user sends a message figure out a solution and provide a final answer.\n{{#tools.length}}\nYou have access to a set of tools that can be used to retrieve information and perform actions.\nPay close attention to the tool description to determine if a tool is useful in a particular context.\n{{/tools.length}}\n\n# Communication structure\nYou communicate only in instruction lines. Valid instruction lines are 'Thought' followed by 'Tool Name' and then 'Tool Input', or 'Thought' followed by 'Final Answer'\n\nLine starting 'Thought: ' The assistant's response always starts with a thought, this is a single line where the assistant thinks about the user's message and describes in detail what it should do next.\n{{#tools.length}}\nIn a 'Thought: ', the assistant should determine if a Tool Call is necessary to get more information or perform an action, or if the available information is sufficient to provide the Final Answer.\nIf a tool needs to be called and is available, the assistant will produce a tool call:\nLine starting 'Tool Name: ' name of the tool that you want to use.\nLine starting 'Tool Input: ' JSON formatted tool arguments adhering to the selected tool parameters schema i.e. {\"arg1\":\"value1\", \"arg2\":\"value2\"}.\nAfter a 'Tool Input: ' the next message will contain a tool response. The next output should be a 'Thought: ' where the assistant thinks about the all the information it has available, and what it should do next (e.g. try the same tool with a different input, try a different tool, or proceed with answering the original user question).\n{{/tools.length}}\nOnce enough information is available to provide the Final Answer, the last line in the message needs to be:\nLine starting 'Final Answer: ' followed by a concise and clear answer to the original message.\n\n# Best practices\n- Use markdown syntax for formatting code snippets, links, JSON, tables, images, files.\n{{#tools.length}}\n- Do not attempt to use a tool that is not listed in available tools. This will cause an error.\n- Make sure that tool input is in the correct format and contains the correct arguments.\n{{/tools.length}}\n- When the message is unclear, respond with a line starting with 'Final Answer:' followed by a request for additional information needed to solve the problem.\n- When the user wants to chitchat instead, always respond politely.\n\n# Date and Time\nThe current date and time is: {{formatDate}}\n{{#tools.length}}\nYou do not need a tool to get the current Date and Time. Use the information available here.\n{{/tools.length}}\n\n{{#instructions}} \n# Additional instructions\n{{.}} \n{{/instructions}}\n`;\n});\n\nexport const GraniteReActAgentSchemaErrorPrompt = ReActAgentSchemaErrorPrompt.fork((config) => {\n  config.template = `Error: The generated response does not adhere to the communication structure mentioned in the system prompt.\nYou communicate only in instruction lines. Valid instruction lines are 'Thought' followed by 'Tool Name' and then 'Tool Input' or 'Thought' followed by 'Final Answer'.`;\n});\n\nexport const GraniteReActAgentUserPrompt = ReActAgentUserPrompt.fork((config) => {\n  config.template = `{{input}}`;\n});\n\nexport const GraniteReActAgentToolNotFoundPrompt = ReActAgentToolNotFoundPrompt.fork((config) => {\n  config.template = `Tool does not exist!\n{{#tools.length}}\nUse one of the following tools: {{#trim}}{{#tools}}{{name}},{{/tools}}{{/trim}}\n{{/tools.length}}`;\n});\n\nexport const GraniteReActAgentToolErrorPrompt = ReActAgentToolErrorPrompt.fork((config) => {\n  config.template = `The tool has failed; the error log is shown below. If the tool cannot accomplish what you want, use a different tool or explain why you can't use it.\n\n{{reason}}`;\n});\n\nexport const GraniteReActAgentToolInputErrorPrompt = ReActAgentToolInputErrorPrompt.fork(\n  (config) => {\n    config.template = `{{reason}}\n\nHINT: If you're convinced that the input was correct but the tool cannot process it then use a different tool or say I don't know.`;\n  },\n);\n"]}