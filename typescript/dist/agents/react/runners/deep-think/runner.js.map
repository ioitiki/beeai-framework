{"version":3,"sources":["runner.ts"],"names":["DeepThinkRunner","DefaultRunner","defaultTemplates","system","DeepThinkReActAgentSystemPrompt","assistant","DeepThinkReActAgentAssistantPrompt","user","DeepThinkReActAgentUserPrompt","schemaError","DeepThinkReActAgentSchemaErrorPrompt","toolNotFoundError","DeepThinkReActAgentToolNotFoundPrompt","toolError","DeepThinkReActAgentToolErrorPrompt","toolInputError","DeepThinkReActAgentToolInputErrorPrompt","userEmpty","ReActAgentUserEmptyPrompt","toolNoResultError","ReActAgentToolNoResultsPrompt","register","constructor","input","options","run","emitter","on","update","meta","memory","key","add","UserMessage","value","success","createdAt","Date","isBlocking","createParser","tools","parser","fork","nodes","silentNodes","thought","prefix","next","isStart","field","ZodParserField","z","string","min","dummy_thought_end","isDummy","transform","_","tool_name","tool_input","isEnd","tool_output","final_answer","enumerable"],"mappings":"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","file":"runner.js","sourcesContent":["/**\n * Copyright 2025 Â© BeeAI a Series of LF Projects, LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { AnyTool } from \"@/tools/base.js\";\nimport { DefaultRunner } from \"@/agents/react/runners/default/runner.js\";\nimport {\n  DeepThinkReActAgentAssistantPrompt,\n  DeepThinkReActAgentSchemaErrorPrompt,\n  DeepThinkReActAgentSystemPrompt,\n  DeepThinkReActAgentToolErrorPrompt,\n  DeepThinkReActAgentToolInputErrorPrompt,\n  DeepThinkReActAgentToolNotFoundPrompt,\n  DeepThinkReActAgentUserPrompt,\n} from \"@/agents/react/runners/deep-think/prompts.js\";\nimport {\n  ReActAgentToolNoResultsPrompt,\n  ReActAgentUserEmptyPrompt,\n} from \"@/agents/react/prompts.js\";\nimport { Cache } from \"@/cache/decoratorCache.js\";\nimport { ZodParserField } from \"@/parsers/field.js\";\nimport { z } from \"zod\";\nimport { ReActAgentInput, ReActAgent } from \"@/agents/react/agent.js\";\nimport { ReActAgentRunOptions } from \"@/agents/react/types.js\";\nimport { GetRunContext } from \"@/context.js\";\nimport { UserMessage } from \"@/backend/message.js\";\n\nexport class DeepThinkRunner extends DefaultRunner {\n  @Cache({ enumerable: false })\n  public get defaultTemplates() {\n    return {\n      system: DeepThinkReActAgentSystemPrompt,\n      assistant: DeepThinkReActAgentAssistantPrompt,\n      user: DeepThinkReActAgentUserPrompt,\n      schemaError: DeepThinkReActAgentSchemaErrorPrompt,\n      toolNotFoundError: DeepThinkReActAgentToolNotFoundPrompt,\n      toolError: DeepThinkReActAgentToolErrorPrompt,\n      toolInputError: DeepThinkReActAgentToolInputErrorPrompt,\n      // Note: These are from ReAct\n      userEmpty: ReActAgentUserEmptyPrompt,\n      toolNoResultError: ReActAgentToolNoResultsPrompt,\n    };\n  }\n\n  static {\n    this.register();\n  }\n\n  constructor(\n    input: ReActAgentInput,\n    options: ReActAgentRunOptions,\n    run: GetRunContext<ReActAgent>,\n  ) {\n    super(input, options, run);\n\n    run.emitter.on(\n      \"update\",\n      async ({ update, meta, memory }) => {\n        if (update.key === \"tool_output\") {\n          await memory.add(\n            new UserMessage(update.value, { success: meta.success, createdAt: new Date() }),\n          );\n        }\n      },\n      {\n        isBlocking: true,\n      },\n    );\n  }\n\n  protected createParser(tools: AnyTool[]) {\n    const { parser } = super.createParser(tools);\n\n    return {\n      parser: parser.fork((nodes, options) => ({\n        options: {\n          ...options,\n          // @ts-expect-error\n          silentNodes: [...(options?.silentNodes ?? []), \"dummy_thought_end\"],\n        },\n        nodes: {\n          ...nodes,\n          thought: {\n            ...nodes.thought,\n            prefix: \"<think>\",\n            // @ts-expect-error\n            next: [\"dummy_thought_end\"] as const,\n            isStart: true,\n            field: new ZodParserField(z.string().min(1)),\n          },\n          dummy_thought_end: {\n            prefix: \"</think>\",\n            isDummy: true,\n            next: [\"tool_name\", \"final_answer\"],\n            field: new ZodParserField(z.string().transform((_) => \"\")),\n          },\n          tool_name: { ...nodes.tool_name, prefix: \"Tool Name:\" },\n          tool_input: {\n            ...nodes.tool_input,\n            prefix: \"Tool Input:\",\n            isEnd: true,\n            next: [],\n          },\n          tool_output: { ...nodes.tool_name, prefix: \"Tool Output:\" },\n          final_answer: { ...nodes.final_answer, prefix: \"Response:\" },\n        },\n      })),\n    } as const;\n  }\n}\n"]}