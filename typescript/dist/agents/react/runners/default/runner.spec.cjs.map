{"version":3,"sources":["runner.spec.ts"],"names":["vi","mock","UnconstrainedMemory","TokenMemory","describe","beforeEach","useRealTimers","it","useFakeTimers","setSystemTime","Date","createMemory","memory","addMany","UserMessage","AssistantMessage","createInstance","prompt","instance","DefaultRunner","llm","expect","any","Function","tools","templates","RunContext","init","memory2","add","createdAt","instance2","messages","toEqual","each","ReActAgentUserPrompt","fork","old","functions","formatMeta","template","user","a","b","zip","filter","msg","role","Role","USER","render","input","text","meta","undefined","toStrictEqual"],"mappings":"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","file":"runner.spec.cjs","sourcesContent":["/**\n * Copyright 2025 Â© BeeAI a Series of LF Projects, LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { DefaultRunner } from \"@/agents/react/runners/default/runner.js\";\nimport { UnconstrainedMemory } from \"@/memory/unconstrainedMemory.js\";\nimport { AssistantMessage, Role, UserMessage } from \"@/backend/message.js\";\nimport { BaseMemory } from \"@/memory/base.js\";\nimport { ReActAgentUserPrompt } from \"@/agents/react/prompts.js\";\nimport { zip } from \"remeda\";\nimport { RunContext } from \"@/context.js\";\nimport { ReActAgent } from \"@/agents/react/agent.js\";\n\nvi.mock(\"@/memory/tokenMemory.js\", async () => {\n  const { UnconstrainedMemory } = await import(\"@/memory/unconstrainedMemory.js\");\n  class TokenMemory extends UnconstrainedMemory {}\n  return { TokenMemory };\n});\n\nvi.mock(\"@/context.js\");\n\ndescribe(\"ReAct Agent Runner\", () => {\n  beforeEach(() => {\n    vi.useRealTimers();\n  });\n\n  it(\"Handles different prompt input source\", async () => {\n    vi.useFakeTimers();\n    vi.setSystemTime(new Date(\"2024-09-10T19:51:46.954Z\"));\n\n    const createMemory = async () => {\n      const memory = new UnconstrainedMemory();\n      await memory.addMany([\n        new UserMessage(\"What is your name?\"),\n        new AssistantMessage(\"I am Bee\"),\n      ]);\n      return memory;\n    };\n\n    const createInstance = async (memory: BaseMemory, prompt: string | null) => {\n      const instance = new DefaultRunner(\n        {\n          llm: expect.any(Function),\n          memory,\n          tools: [],\n          templates: {},\n        },\n        {},\n        new RunContext<ReActAgent, any>({} as any, {} as any),\n      );\n      await instance.init({ prompt });\n      return instance;\n    };\n\n    const memory = await createMemory();\n    const prompt = \"What can you do for me?\";\n    const instance = await createInstance(memory, prompt);\n\n    const memory2 = await createMemory();\n    await memory2.add(new UserMessage(prompt, { createdAt: new Date() }));\n    const instance2 = await createInstance(memory2, null);\n    expect(instance.memory.messages).toEqual(instance2.memory.messages);\n  });\n\n  it.each([\n    ReActAgentUserPrompt.fork((old) => ({\n      ...old,\n      functions: { ...old.functions, formatMeta: () => \"\" },\n    })),\n    ReActAgentUserPrompt.fork((old) => ({ ...old, template: `{{input}}` })),\n    ReActAgentUserPrompt.fork((old) => ({ ...old, template: `User: {{input}}` })),\n    ReActAgentUserPrompt.fork((old) => ({ ...old, template: `` })),\n  ])(\"Correctly formats user input\", async (template: typeof ReActAgentUserPrompt) => {\n    const memory = new UnconstrainedMemory();\n    await memory.addMany([\n      new UserMessage(\"What is your name?\"),\n      new AssistantMessage(\"Bee\"),\n      new UserMessage(\"Who are you?\"),\n      new AssistantMessage(\"I am a helpful assistant.\"),\n    ]);\n\n    const prompt = \"What can you do for me?\";\n    const instance = new DefaultRunner(\n      {\n        llm: expect.any(Function),\n        memory,\n        tools: [],\n        templates: {\n          user: template,\n        },\n      },\n      {},\n      new RunContext<ReActAgent, any>({} as any, {} as any),\n    );\n    await instance.init({ prompt });\n\n    for (const [a, b] of zip(\n      [...memory.messages.filter((msg) => msg.role === Role.USER), new UserMessage(prompt)],\n      instance.memory.messages.filter((msg) => msg.role === Role.USER),\n    )) {\n      expect(template.render({ input: a.text, meta: undefined })).toStrictEqual(b.text);\n    }\n  });\n});\n"]}