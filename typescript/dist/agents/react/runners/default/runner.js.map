{"version":3,"sources":["runner.ts"],"names":["DefaultRunner","BaseRunner","useNativeToolCalling","defaultTemplates","system","ReActAgentSystemPrompt","assistant","ReActAgentAssistantPrompt","user","ReActAgentUserPrompt","schemaError","ReActAgentSchemaErrorPrompt","toolNotFoundError","ReActAgentToolNotFoundPrompt","toolError","ReActAgentToolErrorPrompt","toolInputError","ReActAgentToolInputErrorPrompt","userEmpty","ReActAgentUserEmptyPrompt","toolNoResultError","ReActAgentToolNoResultsPrompt","register","llm","signal","meta","emitter","tempMessageKey","Retryable","onRetry","emit","onError","error","failedAttemptsCounter","use","LinePrefixParserError","reason","Reason","NoDataReceived","memory","add","AssistantMessage","UserMessage","templates","render","executor","tools","input","slice","parser","createParser","raw","create","messages","undefined","abortSignal","stream","observe","llmEmitter","on","value","key","field","isDone","data","finalState","update","parsedValue","success","delta","callbacks","abort","getTextContent","partialState","tool_output","end","deleteMany","filter","msg","getProp","state","config","maxRetries","options","execution","maxRetriesPerStep","get","tool","find","name","trim","toUpperCase","tool_name","AgentError","context","output","iteration","tool_input","FrameworkError","ensure","toolOptions","shallowCopy","toolOutput","run","Tool","contextKeys","Memory","result","isEmpty","ToolInputValidationError","toString","ToolError","explain","renderers","self","message","prompt","variables","Promise","all","map","description","replaceAll","replace","concat","schema","JSON","stringify","getInputJsonSchema","ignoredKeys","Set","has","SystemMessage","instructions","createdAt","Date","toISOString","initMemory","history","prevConversation","isTruthy","role","Role","USER","text","TokenMemory","capacityThreshold","syncThreshold","handlers","removalSelector","curMessages","prevConversationMessage","includes","last","lastMessage","length","ASSISTANT","addMany","LinePrefixParser","thought","prefix","next","isStart","ZodParserField","z","string","min","pipeline","enum","isEnd","JSONParserField","object","passthrough","base","matchPair","final_answer","waitForStartNode","endOnRepeat","fallback","stash","enumerable"],"mappings":"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","file":"runner.js","sourcesContent":["/**\n * Copyright 2025 © BeeAI a Series of LF Projects, LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  BaseRunner,\n  ReActAgentRunnerLLMInput,\n  ReActAgentRunnerToolInput,\n} from \"@/agents/react/runners/base.js\";\nimport type {\n  ReActAgentRunIteration,\n  ReActAgentParserInput,\n  ReActAgentRunInput,\n} from \"@/agents/react/types.js\";\nimport { Retryable } from \"@/internals/helpers/retryable.js\";\nimport { AgentError } from \"@/agents/base.js\";\nimport {\n  ReActAgentAssistantPrompt,\n  ReActAgentSchemaErrorPrompt,\n  ReActAgentSystemPrompt,\n  ReActAgentToolErrorPrompt,\n  ReActAgentToolInputErrorPrompt,\n  ReActAgentToolNoResultsPrompt,\n  ReActAgentToolNotFoundPrompt,\n  ReActAgentUserEmptyPrompt,\n  ReActAgentUserPrompt,\n} from \"@/agents/react/prompts.js\";\nimport { AnyTool, Tool, ToolError, ToolInputValidationError, ToolOutput } from \"@/tools/base.js\";\nimport { FrameworkError } from \"@/errors.js\";\nimport { isTruthy, last } from \"remeda\";\nimport { LinePrefixParser, LinePrefixParserError } from \"@/parsers/linePrefix.js\";\nimport { JSONParserField, ZodParserField } from \"@/parsers/field.js\";\nimport { z } from \"zod\";\nimport { AssistantMessage, Role, SystemMessage, UserMessage } from \"@/backend/message.js\";\nimport { TokenMemory } from \"@/memory/tokenMemory.js\";\nimport { getProp } from \"@/internals/helpers/object.js\";\nimport { BaseMemory } from \"@/memory/base.js\";\nimport { Cache } from \"@/cache/decoratorCache.js\";\nimport { shallowCopy } from \"@/serializer/utils.js\";\n\nexport class DefaultRunner extends BaseRunner {\n  protected useNativeToolCalling = false;\n\n  @Cache({ enumerable: false })\n  public get defaultTemplates() {\n    return {\n      system: ReActAgentSystemPrompt,\n      assistant: ReActAgentAssistantPrompt,\n      user: ReActAgentUserPrompt,\n      schemaError: ReActAgentSchemaErrorPrompt,\n      toolNotFoundError: ReActAgentToolNotFoundPrompt,\n      toolError: ReActAgentToolErrorPrompt,\n      toolInputError: ReActAgentToolInputErrorPrompt,\n      userEmpty: ReActAgentUserEmptyPrompt,\n      toolNoResultError: ReActAgentToolNoResultsPrompt,\n    };\n  }\n\n  static {\n    this.register();\n  }\n\n  async llm({ signal, meta, emitter }: ReActAgentRunnerLLMInput): Promise<ReActAgentRunIteration> {\n    const tempMessageKey = \"tempMessage\" as const;\n\n    return new Retryable({\n      onRetry: () => emitter.emit(\"retry\", { meta }),\n      onError: async (error) => {\n        await emitter.emit(\"error\", { error, meta });\n        this.failedAttemptsCounter.use(error);\n\n        if (error instanceof LinePrefixParserError) {\n          // Prevent hanging on EOT\n          if (error.reason === LinePrefixParserError.Reason.NoDataReceived) {\n            await this.memory.add(\n              new AssistantMessage(\"\\n\", {\n                [tempMessageKey]: true,\n              }),\n            );\n          } else {\n            await this.memory.add(\n              new UserMessage(this.templates.schemaError.render({}), {\n                [tempMessageKey]: true,\n              }),\n            );\n          }\n        }\n      },\n      executor: async () => {\n        const tools = this.input.tools.slice();\n        await emitter.emit(\"start\", { meta, tools, memory: this.memory });\n\n        const { parser } = this.createParser(tools);\n        const raw = await this.input.llm\n          .create({\n            messages: this.memory.messages.slice(),\n            tools: this.useNativeToolCalling ? tools : undefined,\n            abortSignal: signal,\n            stream: this.input.stream !== false,\n          })\n          .observe((llmEmitter) => {\n            parser.emitter.on(\"update\", async ({ value, key, field }) => {\n              if (key === \"tool_output\" && parser.isDone) {\n                return;\n              }\n              await emitter.emit(\"update\", {\n                data: parser.finalState,\n                update: { key, value: field.raw, parsedValue: value },\n                meta: { success: true, ...meta },\n                memory: this.memory,\n              });\n            });\n            parser.emitter.on(\"partialUpdate\", async ({ key, delta, value }) => {\n              await emitter.emit(\"partialUpdate\", {\n                data: parser.finalState,\n                update: { key, value: delta, parsedValue: value },\n                meta: { success: true, ...meta },\n              });\n            });\n\n            llmEmitter.on(\"newToken\", async ({ value, callbacks }) => {\n              if (parser.isDone) {\n                callbacks.abort();\n                return;\n              }\n\n              await parser.add(value.getTextContent());\n              if (parser.partialState.tool_output !== undefined) {\n                callbacks.abort();\n              }\n            });\n          });\n\n        await parser.end();\n        await this.memory.deleteMany(\n          this.memory.messages.filter((msg) => getProp(msg.meta, [tempMessageKey]) === true),\n        );\n\n        return {\n          state: parser.finalState,\n          raw,\n        };\n      },\n      config: {\n        maxRetries: this.options.execution?.maxRetriesPerStep,\n        signal,\n      },\n    }).get();\n  }\n\n  async tool({ state, signal, meta, emitter }: ReActAgentRunnerToolInput) {\n    const tool = this.input.tools.find(\n      (tool) => tool.name.trim().toUpperCase() == state.tool_name?.trim()?.toUpperCase(),\n    );\n    if (!tool) {\n      this.failedAttemptsCounter.use(\n        new AgentError(`Agent was trying to use non-existing tool \"${state.tool_name}\"`, [], {\n          context: { state, meta },\n        }),\n      );\n\n      return {\n        success: false,\n        output: this.templates.toolNotFoundError.render({\n          tools: this.input.tools,\n        }),\n      };\n    }\n\n    return new Retryable({\n      config: {\n        signal,\n        maxRetries: this.options.execution?.maxRetriesPerStep,\n      },\n      onError: async (error) => {\n        await emitter.emit(\"toolError\", {\n          data: {\n            iteration: state,\n            tool,\n            input: state.tool_input,\n            options: this.options,\n            error: FrameworkError.ensure(error),\n          },\n          meta,\n        });\n        this.failedAttemptsCounter.use(error);\n      },\n      executor: async () => {\n        const toolOptions = shallowCopy(this.options);\n\n        try {\n          await emitter.emit(\"toolStart\", {\n            data: {\n              tool,\n              input: state.tool_input,\n              options: toolOptions,\n              iteration: state,\n            },\n            meta,\n          });\n          const toolOutput: ToolOutput = await tool.run(state.tool_input, toolOptions).context({\n            [Tool.contextKeys.Memory]: this.memory,\n          });\n          await emitter.emit(\"toolSuccess\", {\n            data: {\n              tool,\n              input: state.tool_input,\n              options: toolOptions,\n              result: toolOutput,\n              iteration: state,\n            },\n            meta,\n          });\n\n          if (toolOutput.isEmpty()) {\n            return { output: this.templates.toolNoResultError.render({}), success: true };\n          }\n\n          return {\n            success: true,\n            output: toolOutput.getTextContent(),\n          };\n        } catch (error) {\n          await emitter.emit(\"toolError\", {\n            data: {\n              tool,\n              input: state.tool_input,\n              options: toolOptions,\n              error,\n              iteration: state,\n            },\n            meta,\n          });\n\n          if (error instanceof ToolInputValidationError) {\n            this.failedAttemptsCounter.use(error);\n\n            return {\n              success: false,\n              output: this.templates.toolInputError.render({\n                reason: error.toString(),\n              }),\n            };\n          }\n\n          if (error instanceof ToolError) {\n            this.failedAttemptsCounter.use(error);\n\n            return {\n              success: false,\n              output: this.templates.toolError.render({\n                reason: error.explain(),\n              }),\n            };\n          }\n\n          throw error;\n        }\n      },\n    }).get();\n  }\n\n  @Cache({ enumerable: false })\n  protected get renderers() {\n    const self = {\n      user: {\n        message: ({ prompt }: ReActAgentRunInput) =>\n          prompt !== null || this.input.memory.isEmpty()\n            ? new UserMessage(prompt || this.templates.userEmpty.render({}))\n            : undefined,\n      },\n      system: {\n        variables: {\n          tools: async () => {\n            return await Promise.all(\n              this.input.tools.map(async (tool) => ({\n                name: tool.name,\n                description: tool.description.replaceAll(\"\\n\", \".\").replace(/\\.$/, \"\").concat(\".\"),\n                schema: JSON.stringify(\n                  await tool.getInputJsonSchema(),\n                  (() => {\n                    const ignoredKeys = new Set([\"minLength\", \"maxLength\", \"$schema\"]);\n                    return (key, value) => (ignoredKeys.has(key) ? undefined : value);\n                  })(),\n                ),\n              })),\n            );\n          },\n        },\n        message: async () =>\n          new SystemMessage(\n            this.templates.system.render({\n              tools: await self.system.variables.tools(),\n              instructions: undefined,\n              createdAt: new Date().toISOString(),\n            }),\n            {\n              createdAt: new Date(),\n            },\n          ),\n      },\n    };\n    return self;\n  }\n\n  protected async initMemory({ prompt }: ReActAgentRunInput): Promise<BaseMemory> {\n    const { memory: history } = this.input;\n\n    const prevConversation = [...history.messages, this.renderers.user.message({ prompt })]\n      .filter(isTruthy)\n      .map((message) => {\n        if (message.role === Role.USER) {\n          const isEmpty = !message.text.trim();\n          const text = isEmpty\n            ? (this.templates?.userEmpty ?? ReActAgentUserEmptyPrompt).render({})\n            : (this.templates?.user ?? ReActAgentUserPrompt).render({\n                input: message.text,\n                meta: {\n                  ...message?.meta,\n                  createdAt: message?.meta?.createdAt?.toISOString?.(),\n                },\n              });\n\n          return new UserMessage(text, message.meta);\n        }\n        return message;\n      });\n\n    const memory = new TokenMemory({\n      capacityThreshold: 0.85,\n      syncThreshold: 0.5,\n      handlers: {\n        removalSelector(curMessages) {\n          // First we remove messages from the past conversations\n          const prevConversationMessage = curMessages.find((msg) => prevConversation.includes(msg));\n          if (prevConversationMessage && prevConversationMessage !== last(prevConversation)) {\n            return prevConversationMessage;\n          }\n\n          const lastMessage =\n            curMessages.length > 3\n              ? (curMessages.find(\n                  (msg) =>\n                    msg.role === Role.ASSISTANT && getProp(msg, [\"ctx\", \"success\"]) === false,\n                ) ?? curMessages.find((msg) => msg.role === Role.ASSISTANT))\n              : null;\n\n          if (!lastMessage) {\n            throw new AgentError(\"Cannot fit the current conversation into the context window!\");\n          }\n          return lastMessage;\n        },\n      },\n    });\n    await memory.addMany([await this.renderers.system.message(), ...prevConversation]);\n    return memory;\n  }\n\n  protected createParser(tools: AnyTool[]) {\n    const parser = new LinePrefixParser<ReActAgentParserInput>(\n      {\n        thought: {\n          prefix: \"Thought:\",\n          next: [\"tool_name\", \"final_answer\"],\n          isStart: true,\n          field: new ZodParserField(z.string().min(1)),\n        },\n        tool_name: {\n          prefix: \"Function Name:\",\n          next: [\"tool_input\"],\n          field: new ZodParserField(\n            z.pipeline(\n              z.string().trim(),\n              z.enum(tools.map((tool) => tool.name) as [string, ...string[]]),\n            ),\n          ),\n        },\n        tool_input: {\n          prefix: \"Function Input:\",\n          next: [\"tool_output\"],\n          isEnd: true,\n          field: new JSONParserField({\n            schema: z.object({}).passthrough(),\n            base: {},\n            matchPair: [\"{\", \"}\"],\n          }),\n        },\n        tool_output: {\n          prefix: \"Function Output:\",\n          next: [\"final_answer\"],\n          isEnd: true,\n          field: new ZodParserField(z.string()),\n        },\n        final_answer: {\n          prefix: \"Final Answer:\",\n          next: [],\n          isStart: true,\n          isEnd: true,\n          field: new ZodParserField(z.string().min(1)),\n        },\n      },\n      {\n        waitForStartNode: true,\n        endOnRepeat: true,\n        fallback: (stash) =>\n          stash\n            ? [\n                { key: \"thought\", value: \"I now know the final answer.\" },\n                { key: \"final_answer\", value: stash },\n              ]\n            : [],\n      },\n    );\n\n    return {\n      parser,\n    } as const;\n  }\n}\n"]}