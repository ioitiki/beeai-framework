{"version":3,"sources":["qdrant.ts"],"names":["QdrantAction","QdrantDatabaseTool","Tool","name","description","inputSchema","z","object","action","nativeEnum","describe","collectionName","string","optional","vector","array","number","vectors","topK","coerce","int","default","filter","record","any","payload","ids","or","emitter","Emitter","root","child","namespace","creator","validateInput","schema","input","ToolInputValidationError","register","client","QdrantClient","options","connection","_run","_options","collections","listCollections","JSONToolOutput","ToolError","collectionInfo","getCollectionInfo","searchResults","search","insertResults","insert","deleteResults","delete","response","getCollections","map","collection","error","getCollection","points","index","id","uuidv4","upsert","searchParams","query","limit","with_payload"],"mappings":";;;;;;;;;;;AAcC,SAAA,YAAA,CAAA,UAAA,EAAA,MAAA,EAAA,GAAA,EAAA,IAAA,EAAA;;;;;;AAAA,MAAA,CAAA,YAAA,EAAA,cAAA,CAAA;;;;;AA0BWA,IAAAA,YAAAA,4BAAAA,aAAAA,EAAAA;;;;;;AAAAA,EAAAA,OAAAA,aAAAA;;AAQL,MAAMC,2BAA2BC,aAAAA,CAAAA;EAhDxC;;;EAoDEC,IAAO,GAAA,oBAAA;EAEPC,WAAc,GAAA,CAAA;UACR,iBAAA,CAAA;UACA,mBAAA,CAAA;UACA,QAAA,CAAA;UACA,QAAA,CAAA;UACA,QAAA,CAAA,kCAAA,CAAA;EAENC,WAAc,GAAA;AACZ,IAAA,OAAOC,MAAEC,MAAO,CAAA;AACdC,MAAAA,MAAAA,EAAQF,KACLG,CAAAA,UAAAA,CAAWT,YAAAA,CAAAA,CACXU,SACC,CAAwB,uBAAA,EAAA,iBAAA,CAAuD,wBAAA,EAAA,mBAAA,gDAA8E,QAAA,CAAA,2BAAA,EAAiD,QAAA,CAAA,0BAAA,EAAgD,QAAA,CAAwC,iBAAA,CAAA,CAAA;AAE1SC,MAAAA,cAAAA,EAAgBL,KACbM,CAAAA,MAAAA,EACAC,CAAAA,QAAAA,GACAH,QACC,CAAA,CAAA,kDAAA,EAAmD,mBAAA,CAAA,EAAA,EAAmC,QAAA,CAAA,EAAA,EAAwB,QAAA,CAAA,MAAA,EAA4B,QAAA,CAAuB,CAAA,CAAA;MAErKI,MAAQR,EAAAA,KAAAA,CACLS,KAAMT,CAAAA,KAAAA,CAAEU,MAAM,EAAA,CACdH,CAAAA,QAAAA,EACAH,CAAAA,QAAAA,CAAS,CAAwC,uCAAA,EAAA,QAAA,CAAwB,CAAA,CAAA,CAAA;AAC5EO,MAAAA,OAAAA,EAASX,KACNS,CAAAA,KAAAA,CAAMT,KAAES,CAAAA,KAAAA,CAAMT,MAAEU,MAAM,EAAA,CAAA,CAAA,CACtBH,QAAQ,EAAA,CACRH,QAAS,CAAA,CAAA,oCAAA,EAAqC,QAAA,CAAwB,CAAA,CAAA,CAAA;AACzEQ,MAAAA,IAAAA,EAAMZ,KAAEa,CAAAA,MAAAA,CACLH,MAAM,EAAA,CACNI,GAAG,EAAA,CACHC,OAAQ,CAAA,EAAA,CACRR,CAAAA,QAAAA,EACAH,CAAAA,QAAAA,CAAS,CAA4C,0CAAA,CAAA,CAAA;AACxDY,MAAAA,MAAAA,EAAQhB,KACLiB,CAAAA,MAAAA,CAAOjB,KAAEM,CAAAA,MAAAA,IAAUN,KAAEkB,CAAAA,GAAAA,EAAG,CAAA,CACxBX,QAAQ,EAAA,CACRH,QAAS,CAAA,CAAA,oBAAA,EAAqB,QAAA,CAAwB,CAAA,CAAA,CAAA;AACzDe,MAAAA,OAAAA,EAASnB,KACNS,CAAAA,KAAAA,CAAMT,KAAEiB,CAAAA,MAAAA,CAAOjB,MAAEM,MAAM,EAAA,EAAIN,KAAEkB,CAAAA,GAAAA,EAAG,CAAA,CAAA,CAChCX,QAAQ,EAAA,CACRH,SAAS,CAA4C,0CAAA,CAAA,CAAA;AACxDgB,MAAAA,GAAAA,EAAKpB,KACFS,CAAAA,KAAAA,CAAMT,KAAEM,CAAAA,MAAAA,GAASe,EAAGrB,CAAAA,KAAAA,CAAEU,MAAM,EAAA,CAAA,CAAA,CAC5BH,QAAQ,EAAA,CACRH,SAAS,CAAmC,iCAAA,CAAA;KACjD,CAAA;AACF;EAEgBkB,OACdC,GAAAA,mBAAAA,CAAQC,KAAKC,KAAM,CAAA;IACjBC,SAAW,EAAA;AAAC,MAAA,MAAA;AAAQ,MAAA,UAAA;AAAY,MAAA;;IAChCC,OAAS,EAAA;GACX,CAAA;AAEQC,EAAAA,aAAAA,CACRC,QACAC,KACkC,EAAA;AAClC,IAAMF,KAAAA,CAAAA,aAAAA,CAAcC,QAAQC,KAAAA,CAAAA;AAC5B,IAAA,IAAIA,KAAM5B,CAAAA,MAAAA,IAAM,iBAAoC,IAAA,CAAC4B,MAAMzB,cAAgB,EAAA;AACzE,MAAM,MAAA,IAAI0B,iCACR,CAAA,CAAA,gCAAA,EAAiC,mBAAA,CAAA,EAAA,EAAmC,QAAA,CAAwB,EAAA,EAAA,QAAA,CAA4B,MAAA,EAAA,QAAA,CAAgC,SAAA,CAAA,CAAA;AAE5J;AACA,IAAID,IAAAA,KAAAA,CAAM5B,WAAM,QAA6B,KAAA,CAAC4B,MAAMzB,cAAkB,IAAA,CAACyB,MAAMtB,MAAS,CAAA,EAAA;AACpF,MAAA,MAAM,IAAIuB,iCAAAA,CAAyB,CAAwB,uBAAA,EAAA,QAAA,CAA+B,QAAA,CAAA,CAAA;AAC5F;AACA,IAAID,IAAAA,KAAAA,CAAM5B,WAAM,QAA6B,KAAA,CAAC4B,MAAMzB,cAAkB,IAAA,CAACyB,MAAMnB,OAAU,CAAA,EAAA;AACrF,MAAA,MAAM,IAAIoB,iCAAAA,CAAyB,CAA0B,yBAAA,EAAA,QAAA,CAA+B,QAAA,CAAA,CAAA;AAC9F;AACF;EAEA;AACE,IAAA,IAAA,CAAKC,QAAQ,EAAA;AACf;AAEA,EAAA,MACgBC,MAAgC,GAAA;AAC9C,IAAA,OAAO,IAAIC,yBAAAA,CAAa,IAAKC,CAAAA,OAAAA,CAAQC,UAAU,CAAA;AACjD;EAEA,MAAgBC,IAAAA,CACdP,OACAQ,QAC8B,EAAA;AAC9B,IAAA,QAAQR,MAAM5B,MAAM;AAClB,MAAA,KAAA,iBAAmC,EAAA;AACjC,QAAMqC,MAAAA,WAAAA,GAAc,MAAM,IAAA,CAAKC,eAAe,EAAA;AAC9C,QAAO,OAAA,IAAIC,wBAAeF,WAAAA,CAAAA;AAC5B;AAEA,MAAA,KAAA,mBAAqC,EAAA;AACnC,QAAI,IAAA,CAACT,MAAMzB,cAAgB,EAAA;AACzB,UAAM,MAAA,IAAIqC,mBAAU,mEAAA,CAAA;AACtB;AACA,QAAA,MAAMC,cAAiB,GAAA,MAAM,IAAKC,CAAAA,iBAAAA,CAAkBd,MAAMzB,cAAc,CAAA;AACxE,QAAO,OAAA,IAAIoC,wBAAeE,cAAAA,CAAAA;AAC5B;AAEA,MAAA,KAAA,QAA0B,EAAA;AACxB,QAAA,IAAI,CAACb,KAAAA,CAAMzB,cAAkB,IAAA,CAACyB,MAAMtB,MAAQ,EAAA;AAC1C,UAAM,MAAA,IAAIkC,mBAAU,oEAAA,CAAA;AACtB;AACA,QAAA,MAAMG,aAAgB,GAAA,MAAM,IAAKC,CAAAA,MAAAA,CAAOhB,KAAAA,CAAAA;AACxC,QAAO,OAAA,IAAIW,wBAAeI,aAAAA,CAAAA;AAC5B;AAEA,MAAA,KAAA,QAA0B,EAAA;AACxB,QAAA,IAAI,CAACf,KAAAA,CAAMzB,cAAkB,IAAA,CAACyB,MAAMnB,OAAS,EAAA;AAC3C,UAAM,MAAA,IAAI+B,mBACR,qEAAA,CAAA;AAEJ;AACA,QAAA,MAAMK,aAAgB,GAAA,MAAM,IAAKC,CAAAA,MAAAA,CAAOlB,KAAAA,CAAAA;AACxC,QAAO,OAAA,IAAIW,wBAAeM,aAAAA,CAAAA;AAC5B;AAEA,MAAA,KAAA,QAA0B,EAAA;AACxB,QAAA,IAAI,CAACjB,KAAAA,CAAMzB,cAAkB,IAAA,CAACyB,MAAMV,GAAK,EAAA;AACvC,UAAM,MAAA,IAAIsB,mBAAU,+DAAA,CAAA;AACtB;AACA,QAAA,MAAMO,aAAgB,GAAA,MAAM,IAAKC,CAAAA,MAAAA,CAAOpB,KAAAA,CAAAA;AACxC,QAAO,OAAA,IAAIW,wBAAeQ,aAAAA,CAAAA;AAC5B;MAEA,SAAS;AACP,QAAA,MAAM,IAAIP,kBAAAA,CAAU,CAA6BZ,0BAAAA,EAAAA,KAAAA,CAAM5B,MAAM,CAAE,CAAA,CAAA;AACjE;AACF;AACF;AAEA,EAAA,MAAgBsC,eAAqC,GAAA;AACnD,IAAI,IAAA;AACF,MAAMP,MAAAA,MAAAA,GAAS,MAAM,IAAA,CAAKA,MAAM,EAAA;AAChC,MAAMkB,MAAAA,QAAAA,GAAW,MAAMlB,MAAAA,CAAOmB,cAAc,EAAA;AAE5C,MAAA,OAAOD,SAASZ,WAAYc,CAAAA,GAAAA,CAAI,CAACC,UAAAA,KAAeA,WAAWzD,IAAI,CAAA;AACjE,KAAA,CAAA,OAAS0D,KAAO,EAAA;AACd,MAAA,MAAM,IAAIb,kBAAAA,CAAU,CAA2Ca,wCAAAA,EAAAA,KAAAA,CAAO,CAAA,CAAA;AACxE;AACF;AAEA,EAAA,MAAgBX,kBAAkBvC,cAAsC,EAAA;AACtE,IAAM4B,MAAAA,MAAAA,GAAS,MAAM,IAAA,CAAKA,MAAM,EAAA;AAChC,IAAA,MAAMkB,QAAW,GAAA,MAAMlB,MAAOuB,CAAAA,aAAAA,CAAcnD,cAAAA,CAAAA;AAC5C,IAAO8C,OAAAA,QAAAA;AACT;AAEA,EAAA,MAAgBH,OAAOlB,KAAsC,EAAA;AAC3D,IAAMG,MAAAA,MAAAA,GAAS,MAAM,IAAA,CAAKA,MAAM,EAAA;AAEhC,IAAA,MAAMwB,SAAS3B,KAAMnB,CAAAA,OAAAA,CAAS0C,GAAI,CAAA,CAAC7C,QAAQkD,KAAW,MAAA;AACpDC,MAAAA,EAAAA,EAAI7B,KAAOV,EAAAA,GAAAA,GAAMsC,KAAAA,CAAAA,IAAUE,OAAAA,EAAAA;AAC3BpD,MAAAA,MAAAA;AACAW,MAAAA,OAAAA,EAASW,KAAOX,EAAAA,OAAAA,GAAUuC,KAAAA,CAAAA,IAAU;KACtC,CAAA,CAAA;AAEA,IAAA,MAAMP,QAAW,GAAA,MAAMlB,MAAO4B,CAAAA,MAAAA,CAAO/B,MAAMzB,cAA0B,EAAA;AACnEoD,MAAAA;KACF,CAAA;AAEA,IAAON,OAAAA,QAAAA;AACT;AAEA,EAAA,MAAgBL,OAAOhB,KAAsC,EAAA;AAC3D,IAAMG,MAAAA,MAAAA,GAAS,MAAM,IAAA,CAAKA,MAAM,EAAA;AAEhC,IAAA,MAAM6B,YAAoB,GAAA;AACxBC,MAAAA,KAAAA,EAAOjC,KAAMtB,CAAAA,MAAAA;AACbwD,MAAAA,KAAAA,EAAOlC,MAAMlB,IAAQ,IAAA,EAAA;MACrBqD,YAAc,EAAA,IAAA;AACdjD,MAAAA,MAAAA,EAAQc,KAAMd,CAAAA;AAChB,KAAA;AAEA,IAAA,MAAMmC,WAAW,MAAMlB,MAAAA,CAAO8B,KAAMjC,CAAAA,KAAAA,CAAMzB,gBAA0ByD,YAAAA,CAAAA;AACpE,IAAOX,OAAAA,QAAAA;AACT;AAEA,EAAA,MAAgBD,OAAOpB,KAAsC,EAAA;AAC3D,IAAMG,MAAAA,MAAAA,GAAS,MAAM,IAAA,CAAKA,MAAM,EAAA;AAEhC,IAAA,MAAMkB,QAAW,GAAA,MAAMlB,MAAOiB,CAAAA,MAAAA,CAAOpB,MAAMzB,cAA0B,EAAA;AACnEoD,MAAAA,MAAAA,EAAQ3B,KAAMV,CAAAA;KAChB,CAAA;AAEA,IAAO+B,OAAAA,QAAAA;AACT;AACF","file":"qdrant.cjs","sourcesContent":["/**\n * Copyright 2025 Â© BeeAI a Series of LF Projects, LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  Tool,\n  ToolInput,\n  ToolError,\n  BaseToolOptions,\n  BaseToolRunOptions,\n  JSONToolOutput,\n  ToolInputValidationError,\n  ToolEmitter,\n} from \"@/tools/base.js\";\nimport { Cache } from \"@/cache/decoratorCache.js\";\nimport { AnyToolSchemaLike } from \"@/internals/helpers/schema.js\";\nimport { QdrantClient, QdrantClientParams } from \"@qdrant/js-client-rest\";\nimport { v4 as uuidv4 } from \"uuid\";\n\nimport { z } from \"zod\";\nimport { Emitter } from \"@/emitter/emitter.js\";\n\nexport interface QdrantToolOptions extends BaseToolOptions, QdrantClientParams {\n  connection: QdrantClientParams;\n}\n\nexport type QdrantSearchToolResult = any;\n\nexport enum QdrantAction {\n  ListCollections = \"ListCollections\",\n  GetCollectionInfo = \"GetCollectionInfo\",\n  Search = \"Search\",\n  Insert = \"Insert\",\n  Delete = \"Delete\",\n}\n\nexport class QdrantDatabaseTool extends Tool<\n  JSONToolOutput<QdrantSearchToolResult>,\n  QdrantToolOptions\n> {\n  name = \"QdrantDatabaseTool\";\n\n  description = `Can query data from a Qdrant vector database. IMPORTANT: strictly follow this order of actions:\n     1. ${QdrantAction.ListCollections} - List all the Qdrant collections\n     2. ${QdrantAction.GetCollectionInfo} - Get information about a Qdrant collection\n     3. ${QdrantAction.Insert} - Insert data into a Qdrant collection\n     3. ${QdrantAction.Search} - Perform search on a Qdrant collection\n     4. ${QdrantAction.Delete} - Delete from a Qdrant collection`;\n\n  inputSchema() {\n    return z.object({\n      action: z\n        .nativeEnum(QdrantAction)\n        .describe(\n          `The action to perform. ${QdrantAction.ListCollections} lists all collections, ${QdrantAction.GetCollectionInfo} fetches details for a specified collection, ${QdrantAction.Search} executes a vector search, ${QdrantAction.Insert} inserts new vectors, and ${QdrantAction.Delete} removes vectors.`,\n        ),\n      collectionName: z\n        .string()\n        .optional()\n        .describe(\n          `The name of the collection to query, required for ${QdrantAction.GetCollectionInfo}, ${QdrantAction.Search}, ${QdrantAction.Insert}, and ${QdrantAction.Delete}`,\n        ),\n      vector: z\n        .array(z.number())\n        .optional()\n        .describe(`The vector to search for, required for ${QdrantAction.Search}.`),\n      vectors: z\n        .array(z.array(z.number()))\n        .optional()\n        .describe(`The vectors to insert, required for ${QdrantAction.Insert}.`),\n      topK: z.coerce\n        .number()\n        .int()\n        .default(10)\n        .optional()\n        .describe(`The number of nearest neighbors to return.`),\n      filter: z\n        .record(z.string(), z.any())\n        .optional()\n        .describe(`Optional filter for ${QdrantAction.Search}.`),\n      payload: z\n        .array(z.record(z.string(), z.any()))\n        .optional()\n        .describe(`Additional payload to insert with vectors.`),\n      ids: z\n        .array(z.string().or(z.number()))\n        .optional()\n        .describe(`Array of IDs to delete or insert.`),\n    });\n  }\n\n  public readonly emitter: ToolEmitter<ToolInput<this>, JSONToolOutput<QdrantSearchToolResult>> =\n    Emitter.root.child({\n      namespace: [\"tool\", \"database\", \"qdrant\"],\n      creator: this,\n    });\n\n  protected validateInput(\n    schema: AnyToolSchemaLike,\n    input: unknown,\n  ): asserts input is ToolInput<this> {\n    super.validateInput(schema, input);\n    if (input.action != QdrantAction.ListCollections && !input.collectionName) {\n      throw new ToolInputValidationError(\n        `Collection name is required for ${QdrantAction.GetCollectionInfo}, ${QdrantAction.Search}, ${QdrantAction.Insert}, and ${QdrantAction.Delete} actions.`,\n      );\n    }\n    if (input.action === QdrantAction.Search && (!input.collectionName || !input.vector)) {\n      throw new ToolInputValidationError(`Vector is required for ${QdrantAction.Search} action.`);\n    }\n    if (input.action === QdrantAction.Insert && (!input.collectionName || !input.vectors)) {\n      throw new ToolInputValidationError(`Vectors are required for ${QdrantAction.Insert} action.`);\n    }\n  }\n\n  static {\n    this.register();\n  }\n\n  @Cache()\n  protected async client(): Promise<QdrantClient> {\n    return new QdrantClient(this.options.connection);\n  }\n\n  protected async _run(\n    input: ToolInput<this>,\n    _options: Partial<BaseToolRunOptions>,\n  ): Promise<JSONToolOutput<any>> {\n    switch (input.action) {\n      case QdrantAction.ListCollections: {\n        const collections = await this.listCollections();\n        return new JSONToolOutput(collections);\n      }\n\n      case QdrantAction.GetCollectionInfo: {\n        if (!input.collectionName) {\n          throw new ToolError(\"A collection name is required for Qdrant GetCollectionInfo action\");\n        }\n        const collectionInfo = await this.getCollectionInfo(input.collectionName);\n        return new JSONToolOutput(collectionInfo);\n      }\n\n      case QdrantAction.Search: {\n        if (!input.collectionName || !input.vector) {\n          throw new ToolError(\"A collection name and vector are required for Qdrant Search action\");\n        }\n        const searchResults = await this.search(input);\n        return new JSONToolOutput(searchResults);\n      }\n\n      case QdrantAction.Insert: {\n        if (!input.collectionName || !input.vectors) {\n          throw new ToolError(\n            \"A collection name and vectors are required for Qdrant Insert action\",\n          );\n        }\n        const insertResults = await this.insert(input);\n        return new JSONToolOutput(insertResults);\n      }\n\n      case QdrantAction.Delete: {\n        if (!input.collectionName || !input.ids) {\n          throw new ToolError(\"Collection name and ids are required for Qdrant Delete action\");\n        }\n        const deleteResults = await this.delete(input);\n        return new JSONToolOutput(deleteResults);\n      }\n\n      default: {\n        throw new ToolError(`Invalid action specified: ${input.action}`);\n      }\n    }\n  }\n\n  protected async listCollections(): Promise<string[]> {\n    try {\n      const client = await this.client();\n      const response = await client.getCollections();\n\n      return response.collections.map((collection) => collection.name);\n    } catch (error) {\n      throw new ToolError(`Failed to list collections from Qdrant: ${error}`);\n    }\n  }\n\n  protected async getCollectionInfo(collectionName: string): Promise<any> {\n    const client = await this.client();\n    const response = await client.getCollection(collectionName);\n    return response;\n  }\n\n  protected async insert(input: ToolInput<this>): Promise<any> {\n    const client = await this.client();\n\n    const points = input.vectors!.map((vector, index) => ({\n      id: input?.ids?.[index] ?? uuidv4(),\n      vector: vector,\n      payload: input?.payload?.[index] || {},\n    }));\n\n    const response = await client.upsert(input.collectionName as string, {\n      points: points,\n    });\n\n    return response;\n  }\n\n  protected async search(input: ToolInput<this>): Promise<any> {\n    const client = await this.client();\n\n    const searchParams: any = {\n      query: input.vector,\n      limit: input.topK || 10,\n      with_payload: true,\n      filter: input.filter,\n    };\n\n    const response = await client.query(input.collectionName as string, searchParams);\n    return response;\n  }\n\n  protected async delete(input: ToolInput<this>): Promise<any> {\n    const client = await this.client();\n\n    const response = await client.delete(input.collectionName as string, {\n      points: input.ids!,\n    });\n\n    return response;\n  }\n}\n"]}