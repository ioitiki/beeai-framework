{"version":3,"sources":["summarizeMemory.ts"],"names":["SummarizeMemoryTemplate","PromptTemplate","schema","z","object","summary","string","template","SummarizeMemory","BaseMemory","llm","constructor","config","register","messages","currentSummary","AssistantMessage","delete","message","add","_index","response","create","SystemMessage","render","role","text","getTextContent","reset","createSnapshot","shallowCopy","loadSnapshot","state","Object","assign"],"mappings":";;;;;;;;AA4BaA,MAAAA,uBAAAA,GAA0B,IAAIC,cAAe,CAAA;AACxDC,EAAAA,MAAAA,EAAQC,EAAEC,MAAO,CAAA;AACfC,IAAAA,OAAAA,EAASF,EAAEG,MAAM;GACnB,CAAA;EACAC,QAAU,EAAA,CAAA;;;;AAIZ,CAAA;AAEO,MAAMC,wBAAwBC,UAAAA,CAAAA;EAtCrC;;;EAuCYJ,OAAU,GAAA,EAAA;AACVE,EAAAA,QAAAA;AACAG,EAAAA,GAAAA;AAEVC,EAAAA,WAAAA,CAAYC,MAA8B,EAAA;AACxC,IAAK,KAAA,EAAA;AACL,IAAKL,IAAAA,CAAAA,QAAAA,GAAWK,OAAOL,QAAYP,IAAAA,uBAAAA;AACnC,IAAA,IAAA,CAAKU,MAAME,MAAOF,CAAAA,GAAAA;AACpB;EAEA;AACE,IAAA,IAAA,CAAKG,QAAQ,EAAA;AACf;AAEA,EAAA,IAAIC,QAAsB,GAAA;AACxB,IAAA,MAAMC,iBAAiB,IAAKV,CAAAA,OAAAA;AAC5B,IAAA,IAAI,CAACU,cAAgB,EAAA;AACnB,MAAA,OAAO,EAAA;AACT;AAEA,IAAO,OAAA;AAAC,MAAA,IAAIC,iBAAiBD,cAAAA;;AAC/B;;AAGA,EAAA,MAAME,OAAOC,OAAkB,EAAA;AAC7B,IAAO,OAAA,KAAA;AACT;EAEA,MAAMC,GAAAA,CAAID,SAAkBE,MAAiB,EAAA;AAC3C,IAAA,MAAMC,QAAW,GAAA,MAAM,IAAKX,CAAAA,GAAAA,CAAIY,MAAO,CAAA;MACrCR,QAAU,EAAA;QACR,IAAIS,aAAAA,CACF,IAAKhB,CAAAA,QAAAA,CAASiB,MAAO,CAAA;AACnBnB,UAAAA,OAAAA,EAAS,IAAKA,CAAAA;AAChB,SAAA,CAAA,CAAA;AAEF,QAAA,IAAIW,gBAAiB,CAAA,CAAA;EAC3BE,OAAQO,CAAAA,IAAI,CAAKP,EAAAA,EAAAA,OAAAA,CAAQQ,IAAI;;;AAG9B,CAAA;;KAEG,CAAA;AACA,IAAKrB,IAAAA,CAAAA,OAAAA,GAAUgB,SAASM,cAAc,EAAA;AACxC;EAEAC,KAAQ,GAAA;AACN,IAAA,IAAA,CAAKvB,OAAU,GAAA,EAAA;AACjB;EAEAwB,cAAiB,GAAA;AACf,IAAO,OAAA;AACLxB,MAAAA,OAAAA,EAAS,IAAKA,CAAAA,OAAAA;AACdE,MAAAA,QAAAA,EAAU,IAAKA,CAAAA,QAAAA;AACfG,MAAAA,GAAAA,EAAK,IAAKA,CAAAA,GAAAA;MACVI,QAAUgB,EAAAA,WAAAA,CAAY,KAAKhB,QAAQ;AACrC,KAAA;AACF;AAEAiB,EAAAA,YAAAA,CAAaC,KAA+C,EAAA;AAC1DC,IAAOC,MAAAA,CAAAA,MAAAA,CAAO,MAAMF,KAAAA,CAAAA;AACtB;AACF","file":"summarizeMemory.js","sourcesContent":["/**\n * Copyright 2025 Â© BeeAI a Series of LF Projects, LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { AssistantMessage, Message, SystemMessage } from \"@/backend/message.js\";\nimport { BaseMemory } from \"@/memory/base.js\";\nimport { PromptTemplate } from \"@/template.js\";\nimport { shallowCopy } from \"@/serializer/utils.js\";\nimport { z } from \"zod\";\nimport { ChatModel } from \"@/backend/chat.js\";\n\nexport interface SummarizeMemoryInput {\n  llm: ChatModel;\n  template?: typeof SummarizeMemoryTemplate;\n}\n\nexport const SummarizeMemoryTemplate = new PromptTemplate({\n  schema: z.object({\n    summary: z.string(),\n  }),\n  template: `Progressively summarize the lines of conversation provided, adding onto the previous summary returning a new summary.\n\nCurrent summary:\n{{summary}}`,\n});\n\nexport class SummarizeMemory extends BaseMemory {\n  protected summary = \"\";\n  protected template;\n  protected llm;\n\n  constructor(config: SummarizeMemoryInput) {\n    super();\n    this.template = config.template ?? SummarizeMemoryTemplate;\n    this.llm = config.llm;\n  }\n\n  static {\n    this.register();\n  }\n\n  get messages(): Message[] {\n    const currentSummary = this.summary;\n    if (!currentSummary) {\n      return [];\n    }\n\n    return [new AssistantMessage(currentSummary)];\n  }\n\n  // eslint-disable-next-line unused-imports/no-unused-vars\n  async delete(message: Message) {\n    return false;\n  }\n\n  async add(message: Message, _index?: number) {\n    const response = await this.llm.create({\n      messages: [\n        new SystemMessage(\n          this.template.render({\n            summary: this.summary,\n          }),\n        ),\n        new AssistantMessage(`New lines of conversation:\n${message.role}: ${message.text}\n\nNew summary:\n`),\n      ],\n    });\n    this.summary = response.getTextContent();\n  }\n\n  reset() {\n    this.summary = \"\";\n  }\n\n  createSnapshot() {\n    return {\n      summary: this.summary,\n      template: this.template,\n      llm: this.llm,\n      messages: shallowCopy(this.messages),\n    };\n  }\n\n  loadSnapshot(state: ReturnType<typeof this.createSnapshot>) {\n    Object.assign(this, state);\n  }\n}\n"]}