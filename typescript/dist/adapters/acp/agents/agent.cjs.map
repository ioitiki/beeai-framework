{"version":3,"sources":["agent.ts"],"names":["ACPAgent","BaseAgent","emitter","client","constructor","input","Emitter","root","child","namespace","toCamelCase","agentName","creator","RestfulClient","baseUrl","url","headers","paths","runs","agents","_run","_options","context","inputs","Array","isArray","map","convertToACPMessage","generator","stream","body","JSON","stringify","agent_name","mode","signal","eventData","event","parse","data","emit","key","type","value","undefined","message","AgentError","run","error","text","output","reduce","acc","parts","acc2","part","content","assistantMessage","AssistantMessage","inputMessages","convertToMessage","memory","addMany","add","result","checkAgentExists","response","fetch","find","agent","name","isFatal","createSnapshot","shallowCopy","role","Message","UserMessage"],"mappings":";;;;;;;;;;;AA2BO,MAAMA,iBAAiBC,kBAAAA,CAAAA;EA3B9B;;;;AA4BkBC,EAAAA,OAAAA;AACNC,EAAAA,MAAAA;AAEVC,EAAAA,WAAAA,CAA+BC,KAAsB,EAAA;AACnD,IAAK,KAAA,EAAA,EAAA,KADwBA,KAAAA,GAAAA,KAAAA;AAE7B,IAAKH,IAAAA,CAAAA,OAAAA,GAAUI,mBAAQC,CAAAA,IAAAA,CAAKC,KAAsB,CAAA;MAChDC,SAAW,EAAA;AAAC,QAAA,OAAA;AAAS,QAAA,KAAA;QAAOC,kBAAY,CAAA,IAAA,CAAKL,MAAMM,SAAS;;MAC5DC,OAAS,EAAA;KACX,CAAA;AACA,IAAKT,IAAAA,CAAAA,MAAAA,GAAS,IAAIU,yBAAc,CAAA;AAC9BC,MAAAA,OAAAA,EAAS,KAAKT,KAAMU,CAAAA,GAAAA;AACpBC,MAAAA,OAAAA,kBAAsB,MAAA,CAAA,aAAA;QACpB,QAAU,EAAA,kBAAA;QACV,cAAgB,EAAA;OAFT,CAAA,EAAA,SAAA,CAAA;MAITC,KAAO,EAAA;QAAEC,IAAM,EAAA,CAAA,KAAA,CAAA;QAASC,MAAQ,EAAA,CAAA,OAAA;AAAU;KAC5C,CAAA;AACF;EAEA,MAAgBC,IAAAA,CACdf,KACAgB,EAAAA,QAAAA,EACAC,OAC4B,EAAA;AAC5B,IAAMC,MAAAA,MAAAA,GAASC,KAAMC,CAAAA,OAAAA,CAAQpB,KAAMA,CAAAA,KAAK,CACpCA,GAAAA,KAAAA,CAAMA,KAAMqB,CAAAA,GAAAA,CAAI,IAAKC,CAAAA,mBAAmB,CACxC,GAAA;MAAC,IAAKA,CAAAA,mBAAAA,CAAoBtB,MAAMA,KAAK;;AAEzC,IAAA,MAAMuB,SAAY,GAAA,IAAA,CAAKzB,MAAO0B,CAAAA,MAAAA,CAAO,MAAQ,EAAA;AAC3CC,MAAAA,IAAAA,EAAMC,KAAKC,SAAU,CAAA;AACnBC,QAAAA,UAAAA,EAAY,KAAK5B,KAAMM,CAAAA,SAAAA;QACvBN,KAAOkB,EAAAA,MAAAA;QACPW,IAAM,EAAA;OACR,CAAA;AACAC,MAAAA,MAAAA,EAAQb,OAAQa,CAAAA;KAClB,CAAA;AAEA,IAAA,IAAIC,SAAiB,GAAA,IAAA;AACrB,IAAA,WAAA,MAAiBC,SAAST,SAAW,EAAA;AACnC,MAAI,IAAA;AACFQ,QAAYL,SAAAA,GAAAA,IAAAA,CAAKO,KAAMD,CAAAA,KAAAA,CAAME,IAAI,CAAA;AACjC,QAAMjB,MAAAA,OAAAA,CAAQpB,OAAQsC,CAAAA,IAAAA,CAAK,QAAU,EAAA;AACnCC,UAAAA,GAAAA,EAAKL,SAAUM,CAAAA,IAAAA;UACfC,KAAO,EAAA;YAAE,GAAGP,SAAAA;YAAWM,IAAME,EAAAA,KAAAA;AAAU;SACzC,CAAA;OACM,CAAA,MAAA;AACN,QAAMtB,MAAAA,OAAAA,CAAQpB,OAAQsC,CAAAA,IAAAA,CAAK,OAAS,EAAA;UAClCK,OAAS,EAAA;SACX,CAAA;AACF;AACF;AAEA,IAAA,IAAI,CAACT,SAAW,EAAA;AACd,MAAM,MAAA,IAAIU,oBAAW,+BAAA,CAAA;AACvB;AAEA,IAAIV,IAAAA,SAAAA,CAAUM,SAAS,YAAc,EAAA;AACnC,MAAA,MAAMG,OACJT,GAAAA,SAAAA,CAAUW,GAAKC,EAAAA,KAAAA,EAAOH,OAAW,IAAA,oDAAA;AACnC,MAAMvB,MAAAA,OAAAA,CAAQpB,OAAQsC,CAAAA,IAAAA,CAAK,OAAS,EAAA;AAAEK,QAAAA;OAAQ,CAAA;AAC9C,MAAM,MAAA,IAAIC,oBAAWD,OAAAA,CAAAA;KACZT,MAAAA,IAAAA,SAAAA,CAAUM,SAAS,eAAiB,EAAA;AAC7C,MAAMO,MAAAA,IAAAA,GAAOb,UAAUW,GAAIG,CAAAA,MAAAA,CAAOC,OAChC,CAACC,GAAAA,EAAaF,WACZE,GAAMF,GAAAA,MAAAA,CAAOG,MAAMF,MAAO,CAAA,CAACG,MAAcC,IAAcD,KAAAA,IAAAA,GAAOC,KAAKC,OAAS,EAAA,EAAA,GAC9E,EAAA,CAAA;AAEF,MAAMC,MAAAA,gBAAAA,GAA4B,IAAIC,4BAAAA,CAAiBT,IAAM,EAAA;QAAEZ,KAAOD,EAAAA;OAAU,CAAA;AAChF,MAAMuB,MAAAA,aAAAA,GAAgBnC,KAAMC,CAAAA,OAAAA,CAAQpB,KAAMA,CAAAA,KAAK,CAC3CA,GAAAA,KAAAA,CAAMA,KAAMqB,CAAAA,GAAAA,CAAI,IAAKkC,CAAAA,gBAAgB,CACrC,GAAA;QAAC,IAAKA,CAAAA,gBAAAA,CAAiBvD,MAAMA,KAAK;;AAEtC,MAAM,MAAA,IAAA,CAAKwD,MAAOC,CAAAA,OAAAA,CAAQH,aAAAA,CAAAA;AAC1B,MAAM,MAAA,IAAA,CAAKE,MAAOE,CAAAA,GAAAA,CAAIN,gBAAAA,CAAAA;AAEtB,MAAO,OAAA;QAAEO,MAAQP,EAAAA,gBAAAA;QAAkBpB,KAAOD,EAAAA;AAAU,OAAA;KAC/C,MAAA;AACL,MAAO,OAAA;QAAE4B,MAAQ,EAAA,IAAIN,6BAAiB,yBAAA,CAAA;QAA4BrB,KAAOD,EAAAA;AAAU,OAAA;AACrF;AACF;AAEA,EAAA,MAAM6B,gBAAmB,GAAA;AACvB,IAAI,IAAA;AACF,MAAA,MAAMC,QAAW,GAAA,MAAM,IAAK/D,CAAAA,MAAAA,CAAOgE,MAAM,QAAA,CAAA;AACzC,MAAO,OAAA,CAAC,CAACD,QAAAA,CAAS/C,MAAOiD,CAAAA,IAAAA,CAAK,CAACC,KAAAA,KAAeA,KAAMC,CAAAA,IAAAA,KAAS,IAAKjE,CAAAA,KAAAA,CAAMM,SAAS,CAAA;AACnF,KAAA,CAAA,OAASqC,KAAO,EAAA;AACd,MAAA,MAAM,IAAIF,mBAAW,CAAA,CAAA,sCAAA,EAAyCE,MAAMH,OAAO,CAAA,CAAA,EAAI,EAAI,EAAA;QACjF0B,OAAS,EAAA;OACX,CAAA;AACF;AACF;AAEA,EAAA,IAAIV,MAAS,GAAA;AACX,IAAA,OAAO,KAAKxD,KAAMwD,CAAAA,MAAAA;AACpB;AAEA,EAAA,IAAIA,OAAOA,MAAoB,EAAA;AAC7B,IAAA,IAAA,CAAKxD,MAAMwD,MAASA,GAAAA,MAAAA;AACtB;EAEAW,cAAiB,GAAA;AACf,IAAO,OAAA;AACL,MAAA,GAAG,MAAMA,cAAAA,EAAAA;MACTnE,KAAOoE,EAAAA,qBAAAA,CAAY,KAAKpE,KAAK,CAAA;AAC7BH,MAAAA,OAAAA,EAAS,IAAKA,CAAAA;AAChB,KAAA;AACF;AAEUyB,EAAAA,mBAAAA,CAAoBtB,KAA8B,EAAA;AAC1D,IAAI,IAAA,OAAOA,UAAU,QAAU,EAAA;AAC7B,MAAO,OAAA;QAAEgD,KAAO,EAAA;AAAC,UAAA;YAAEG,OAASnD,EAAAA,KAAAA;YAAOqE,IAAM,EAAA;AAAO;;AAAG,OAAA;AACrD,KAAA,MAAA,IAAWrE,iBAAiBsE,mBAAS,EAAA;AACnC,MAAO,OAAA;QAAEtB,KAAO,EAAA;AAAC,UAAA;AAAEG,YAAAA,OAAAA,EAASnD,KAAMmD,CAAAA,OAAAA;AAASkB,YAAAA,IAAAA,EAAMrE,KAAMqE,CAAAA;AAAK;;AAAG,OAAA;KAC1D,MAAA;AACL,MAAM,MAAA,IAAI5B,oBAAW,wBAAA,CAAA;AACvB;AACF;AAEUc,EAAAA,gBAAAA,CAAiBvD,KAA8B,EAAA;AACvD,IAAI,IAAA,OAAOA,UAAU,QAAU,EAAA;AAC7B,MAAO,OAAA,IAAIuE,wBAAYvE,KAAAA,CAAAA;AACzB,KAAA,MAAA,IAAWA,iBAAiBsE,mBAAS,EAAA;AACnC,MAAOtE,OAAAA,KAAAA;KACF,MAAA;AACL,MAAM,MAAA,IAAIyC,oBAAW,wBAAA,CAAA;AACvB;AACF;AACF","file":"agent.cjs","sourcesContent":["/**\n * Copyright 2025 Â© BeeAI a Series of LF Projects, LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Emitter } from \"@/emitter/emitter.js\";\nimport { AgentError, BaseAgent, BaseAgentRunOptions } from \"@/agents/base.js\";\nimport { GetRunContext } from \"@/context.js\";\nimport { AssistantMessage, Message, UserMessage } from \"@/backend/message.js\";\nimport { BaseMemory } from \"@/memory/base.js\";\nimport { shallowCopy } from \"@/serializer/utils.js\";\nimport { RestfulClient } from \"@/internals/fetcher.js\";\nimport { ACPAgentInput, ACPAgentRunInput, ACPAgentRunOutput } from \"./types.js\";\nimport { ACPAgentEvents } from \"./events.js\";\nimport { toCamelCase } from \"remeda\";\n\nexport class ACPAgent extends BaseAgent<ACPAgentRunInput, ACPAgentRunOutput> {\n  public readonly emitter: Emitter<ACPAgentEvents>;\n  protected client: RestfulClient<{ runs: string; agents: string }>;\n\n  constructor(protected readonly input: ACPAgentInput) {\n    super();\n    this.emitter = Emitter.root.child<ACPAgentEvents>({\n      namespace: [\"agent\", \"acp\", toCamelCase(this.input.agentName)],\n      creator: this,\n    });\n    this.client = new RestfulClient({\n      baseUrl: this.input.url,\n      headers: async () => ({\n        \"Accept\": \"application/json\",\n        \"Content-Type\": \"application/json\",\n      }),\n      paths: { runs: `/runs`, agents: `/agents` },\n    });\n  }\n\n  protected async _run(\n    input: ACPAgentRunInput,\n    _options: BaseAgentRunOptions,\n    context: GetRunContext<this>,\n  ): Promise<ACPAgentRunOutput> {\n    const inputs = Array.isArray(input.input)\n      ? input.input.map(this.convertToACPMessage)\n      : [this.convertToACPMessage(input.input)];\n\n    const generator = this.client.stream(\"runs\", {\n      body: JSON.stringify({\n        agent_name: this.input.agentName,\n        input: inputs,\n        mode: \"stream\",\n      }),\n      signal: context.signal,\n    });\n\n    let eventData: any = null;\n    for await (const event of generator) {\n      try {\n        eventData = JSON.parse(event.data);\n        await context.emitter.emit(\"update\", {\n          key: eventData.type,\n          value: { ...eventData, type: undefined },\n        });\n      } catch {\n        await context.emitter.emit(\"error\", {\n          message: \"Error parsing JSON\",\n        });\n      }\n    }\n\n    if (!eventData) {\n      throw new AgentError(\"No event received from agent.\");\n    }\n\n    if (eventData.type === \"run.failed\") {\n      const message =\n        eventData.run?.error?.message || \"Something went wrong with the agent communication.\";\n      await context.emitter.emit(\"error\", { message });\n      throw new AgentError(message);\n    } else if (eventData.type === \"run.completed\") {\n      const text = eventData.run.output.reduce(\n        (acc: string, output: any) =>\n          acc + output.parts.reduce((acc2: string, part: any) => acc2 + part.content, \"\"),\n        \"\",\n      );\n      const assistantMessage: Message = new AssistantMessage(text, { event: eventData });\n      const inputMessages = Array.isArray(input.input)\n        ? input.input.map(this.convertToMessage)\n        : [this.convertToMessage(input.input)];\n\n      await this.memory.addMany(inputMessages);\n      await this.memory.add(assistantMessage);\n\n      return { result: assistantMessage, event: eventData };\n    } else {\n      return { result: new AssistantMessage(\"No response from agent.\"), event: eventData };\n    }\n  }\n\n  async checkAgentExists() {\n    try {\n      const response = await this.client.fetch(\"agents\");\n      return !!response.agents.find((agent: any) => agent.name === this.input.agentName);\n    } catch (error) {\n      throw new AgentError(`Error while checking agent existence: ${error.message}`, [], {\n        isFatal: true,\n      });\n    }\n  }\n\n  get memory() {\n    return this.input.memory;\n  }\n\n  set memory(memory: BaseMemory) {\n    this.input.memory = memory;\n  }\n\n  createSnapshot() {\n    return {\n      ...super.createSnapshot(),\n      input: shallowCopy(this.input),\n      emitter: this.emitter,\n    };\n  }\n\n  protected convertToACPMessage(input: string | Message): any {\n    if (typeof input === \"string\") {\n      return { parts: [{ content: input, role: \"user\" }] };\n    } else if (input instanceof Message) {\n      return { parts: [{ content: input.content, role: input.role }] };\n    } else {\n      throw new AgentError(\"Unsupported input type\");\n    }\n  }\n\n  protected convertToMessage(input: string | Message): any {\n    if (typeof input === \"string\") {\n      return new UserMessage(input);\n    } else if (input instanceof Message) {\n      return input;\n    } else {\n      throw new AgentError(\"Unsupported input type\");\n    }\n  }\n}\n"]}