{"version":3,"sources":["embedding.ts"],"names":["LangChainEmbeddingModel","EmbeddingModel","emitter","constructor","lcEmbedding","Emitter","root","child","namespace","creator","modelId","providerId","_create","input","run","embeddings","signalRace","embedDocuments","values","signal","slice","usage","tokens","undefined","createSnapshot","loadSnapshot","snapshot","Object","assign"],"mappings":";;;;;;AA2BO,MAAMA,gCAAgCC,cAAAA,CAAAA;EA3B7C;;;;AA4BkBC,EAAAA,OAAAA;AAEhBC,EAAAA,WAAAA,CAA+BC,WAA+B,EAAA;AAC5D,IAAK,KAAA,EAAA,EAAA,KADwBA,WAAAA,GAAAA,WAAAA;AAE7B,IAAKF,IAAAA,CAAAA,OAAAA,GAAUG,OAAQC,CAAAA,IAAAA,CAAKC,KAAM,CAAA;MAChCC,SAAW,EAAA;AAAC,QAAA,WAAA;AAAa,QAAA,SAAA;AAAW,QAAA;;MACpCC,OAAS,EAAA;KACX,CAAA;AACF;AAEA,EAAA,IAAIC,OAAkB,GAAA;AACpB,IAAO,OAAA,WAAA;AACT;;AAEA,EAAA,IAAIC,UAAqB,GAAA;AACvB,IAAO,OAAA,WAAA;AACT;EAEA,MAAgBC,OAAAA,CACdC,OACAC,GAC+B,EAAA;AAC/B,IAAMC,MAAAA,UAAAA,GAAa,MAAMC,UAAAA,CACvB,MAAM,IAAA,CAAKZ,WAAYa,CAAAA,cAAAA,CAAeJ,KAAMK,CAAAA,MAAM,CAClDJ,EAAAA,GAAAA,CAAIK,MAAM,CAAA;AAGZ,IAAO,OAAA;MACLD,MAAQL,EAAAA,KAAAA,CAAMK,OAAOE,KAAK,EAAA;AAC1BL,MAAAA,UAAAA;MACAM,KAAO,EAAA;QAAEC,MAAQC,EAAAA;AAAU;AAC7B,KAAA;AACF;EAEAC,cAAiB,GAAA;AACf,IAAO,OAAA;AACL,MAAA,GAAG,MAAMA,cAAAA,EAAAA;AACTpB,MAAAA,WAAAA,EAAa,IAAKA,CAAAA;AACpB,KAAA;AACF;AAEAqB,EAAAA,YAAAA,CAAaC,QAAkD,EAAA;AAC7DC,IAAOC,MAAAA,CAAAA,MAAAA,CAAO,MAAMF,QAAAA,CAAAA;AACtB;AACF","file":"embedding.js","sourcesContent":["/**\n * Copyright 2025 Â© BeeAI a Series of LF Projects, LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  EmbeddingModel,\n  EmbeddingModelEvents,\n  EmbeddingModelInput,\n  EmbeddingModelOutput,\n} from \"@/backend/embedding.js\";\nimport { RunContext } from \"@/context.js\";\nimport { Emitter } from \"@/emitter/emitter.js\";\nimport { Embeddings as LCEmbeddingModel } from \"@langchain/core/embeddings\";\nimport { signalRace } from \"@/internals/helpers/promise.js\";\n\nexport class LangChainEmbeddingModel extends EmbeddingModel {\n  public readonly emitter: Emitter<EmbeddingModelEvents>;\n\n  constructor(protected readonly lcEmbedding: LCEmbeddingModel) {\n    super();\n    this.emitter = Emitter.root.child({\n      namespace: [\"langchain\", \"backend\", \"embedding\"],\n      creator: this,\n    });\n  }\n\n  get modelId(): string {\n    return \"langchain\"; // TODO\n  }\n\n  get providerId(): string {\n    return \"langchain\";\n  }\n\n  protected async _create(\n    input: EmbeddingModelInput,\n    run: RunContext<this>,\n  ): Promise<EmbeddingModelOutput> {\n    const embeddings = await signalRace(\n      () => this.lcEmbedding.embedDocuments(input.values),\n      run.signal,\n    );\n\n    return {\n      values: input.values.slice(),\n      embeddings,\n      usage: { tokens: undefined },\n    };\n  }\n\n  createSnapshot() {\n    return {\n      ...super.createSnapshot(),\n      lcEmbedding: this.lcEmbedding,\n    };\n  }\n\n  loadSnapshot(snapshot: ReturnType<typeof this.createSnapshot>) {\n    Object.assign(this, snapshot);\n  }\n}\n"]}