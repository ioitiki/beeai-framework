{"version":3,"sources":["agent.ts"],"names":["BeeAIPlatformAgent","BaseAgent","emitter","agent","constructor","input","ACPAgent","Emitter","root","child","namespace","toCamelCase","agentName","creator","_run","_options","context","response","run","observe","on","data","_","emit","result","event","checkAgentExists","memory","createSnapshot","shallowCopy"],"mappings":";;;;;;;;;;AA+BO,MAAMA,2BAA2BC,kBAAAA,CAAAA;EA/BxC;;;;AAmCkBC,EAAAA,OAAAA;AACNC,EAAAA,KAAAA;AAEVC,EAAAA,WAAAA,CAA+BC,KAAgC,EAAA;AAC7D,IAAK,KAAA,EAAA,EAAA,KADwBA,KAAAA,GAAAA,KAAAA;AAE7B,IAAKF,IAAAA,CAAAA,KAAAA,GAAQ,IAAIG,kBAAAA,CAASD,KAAAA,CAAAA;AAC1B,IAAKH,IAAAA,CAAAA,OAAAA,GAAUK,mBAAQC,CAAAA,IAAAA,CAAKC,KAAgC,CAAA;MAC1DC,SAAW,EAAA;AAAC,QAAA,OAAA;AAAS,QAAA,eAAA;QAAiBC,kBAAY,CAAA,IAAA,CAAKN,MAAMO,SAAS;;MACtEC,OAAS,EAAA;KACX,CAAA;AACF;EAEA,MAAgBC,IAAAA,CACdT,KACAU,EAAAA,QAAAA,EACAC,OACsC,EAAA;AACtC,IAAMC,MAAAA,QAAAA,GAAW,MAAM,IAAKd,CAAAA,KAAAA,CAAMe,IAAIb,KAAAA,CAAAA,CAAOc,OAAQ,CAAA,CAACjB,OAAAA,KAAAA;AACpDA,MAAQkB,OAAAA,CAAAA,EAAAA,CACN,QACA,EAAA,OAAOC,IAA2BC,EAAAA,CAAAA,KAChC,MAAMN,OAAAA,CAAQd,OAAQqB,CAAAA,IAAAA,CAAK,QAAUF,EAAAA,IAAAA,CAAAA,CAAAA;AAEzCnB,MAAQkB,OAAAA,CAAAA,EAAAA,CACN,OACA,EAAA,OAAOC,IAA0BC,EAAAA,CAAAA,KAAiB,MAAMN,OAAAA,CAAQd,OAAQqB,CAAAA,IAAAA,CAAK,OAASF,EAAAA,IAAAA,CAAAA,CAAAA;KAE1F,CAAA;AAEA,IAAO,OAAA;AAAEG,MAAAA,MAAAA,EAAQP,QAASO,CAAAA,MAAAA;AAAQC,MAAAA,KAAAA,EAAOR,QAASQ,CAAAA;AAAM,KAAA;AAC1D;AAEA,EAAA,MAAMC,gBAAmB,GAAA;AACvB,IAAO,OAAA,IAAA,CAAKvB,MAAMuB,gBAAgB,EAAA;AACpC;AAEA,EAAA,IAAIC,MAAS,GAAA;AACX,IAAA,OAAO,KAAKxB,KAAMwB,CAAAA,MAAAA;AACpB;AAEA,EAAA,IAAIA,OAAOA,MAAoB,EAAA;AAC7B,IAAA,IAAA,CAAKxB,MAAMwB,MAASA,GAAAA,MAAAA;AACtB;EAEAC,cAAiB,GAAA;AACf,IAAO,OAAA;AACL,MAAA,GAAG,MAAMA,cAAAA,EAAAA;MACTvB,KAAOwB,EAAAA,qBAAAA,CAAY,KAAKxB,KAAK,CAAA;MAC7BF,KAAO,EAAA,IAAA,CAAKA,MAAMyB,cAAc,EAAA;AAChC1B,MAAAA,OAAAA,EAAS,IAAKA,CAAAA;AAChB,KAAA;AACF;AACF","file":"agent.cjs","sourcesContent":["/**\n * Copyright 2025 Â© BeeAI a Series of LF Projects, LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Emitter, EventMeta } from \"@/emitter/emitter.js\";\nimport { BaseAgent, BaseAgentRunOptions } from \"@/agents/base.js\";\nimport { GetRunContext } from \"@/context.js\";\nimport { ACPAgentUpdateEvent, ACPAgentErrorEvent } from \"@/adapters/acp/agents/events.js\";\nimport { BaseMemory } from \"@/memory/base.js\";\nimport { shallowCopy } from \"@/serializer/utils.js\";\nimport {\n  BeeAIPlatformAgentInput,\n  BeeAIPlatformAgentRunInput,\n  BeeAIPlatformAgentRunOutput,\n} from \"./types.js\";\nimport { BeeAIPlatformAgentEvents } from \"./events.js\";\nimport { ACPAgent } from \"@/adapters/acp/agents/agent.js\";\nimport { toCamelCase } from \"remeda\";\n\nexport class BeeAIPlatformAgent extends BaseAgent<\n  BeeAIPlatformAgentRunInput,\n  BeeAIPlatformAgentRunOutput\n> {\n  public readonly emitter: Emitter<BeeAIPlatformAgentEvents>;\n  protected agent: ACPAgent;\n\n  constructor(protected readonly input: BeeAIPlatformAgentInput) {\n    super();\n    this.agent = new ACPAgent(input);\n    this.emitter = Emitter.root.child<BeeAIPlatformAgentEvents>({\n      namespace: [\"agent\", \"beeAIPlatform\", toCamelCase(this.input.agentName)],\n      creator: this,\n    });\n  }\n\n  protected async _run(\n    input: BeeAIPlatformAgentRunInput,\n    _options: BaseAgentRunOptions,\n    context: GetRunContext<this>,\n  ): Promise<BeeAIPlatformAgentRunOutput> {\n    const response = await this.agent.run(input).observe((emitter) => {\n      emitter.on(\n        \"update\",\n        async (data: ACPAgentUpdateEvent, _: EventMeta) =>\n          await context.emitter.emit(\"update\", data),\n      );\n      emitter.on(\n        \"error\",\n        async (data: ACPAgentErrorEvent, _: EventMeta) => await context.emitter.emit(\"error\", data),\n      );\n    });\n\n    return { result: response.result, event: response.event };\n  }\n\n  async checkAgentExists() {\n    return this.agent.checkAgentExists();\n  }\n\n  get memory() {\n    return this.agent.memory;\n  }\n\n  set memory(memory: BaseMemory) {\n    this.agent.memory = memory;\n  }\n\n  createSnapshot() {\n    return {\n      ...super.createSnapshot(),\n      input: shallowCopy(this.input),\n      agent: this.agent.createSnapshot(),\n      emitter: this.emitter,\n    };\n  }\n}\n"]}