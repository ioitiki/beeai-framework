{"version":3,"sources":["chat.ts"],"names":["VercelChatModel","ChatModel","emitter","supportsToolStreaming","constructor","model","modelId","ValueError","Emitter","root","child","namespace","providerId","creator","provider","split","toCamelCase","_create","input","run","responseFormat","ZodSchema","schema","output","_createStructure","finishReason","usage","response","messages","generateText","transformInput","ChatModelOutput","transformMessages","generateObject","temperature","abortSignal","signal","_input","ZodArray","ZodEnum","jsonSchema","z","any","schemaName","name","schemaDescription","description","object","AssistantMessage","JSON","stringify","_createStream","isEmpty","tools","fullStream","streamText","lastChunk","event","message","type","textDelta","toolCallId","toolName","args","ChatModelError","error","ToolMessage","result","Error","Promise","all","map","tool","parameters","getInputJsonSchema","msg","CustomMessage","encodeCustomMessage","role","content","UserMessage","SystemMessage","part","text","join","toolChoice","Tool","toolChoiceSupport","includes","logger","warn","mapToObj","flatMap","providerOptions","createSnapshot","loadSnapshot","snapshot","instance","fromName","destroy","Object","assign"],"mappings":"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","file":"chat.js","sourcesContent":["/**\n * Copyright 2025 Â© BeeAI a Series of LF Projects, LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  ChatModelInput,\n  ChatModel,\n  ChatModelOutput,\n  ChatModelEvents,\n  ChatModelObjectInput,\n  ChatModelObjectOutput,\n} from \"@/backend/chat.js\";\nimport {\n  CoreAssistantMessage,\n  CoreMessage,\n  CoreToolMessage,\n  generateObject,\n  generateText,\n  jsonSchema,\n  LanguageModelV1,\n  streamText,\n  TextPart,\n  ToolCallPart,\n  ToolChoice,\n} from \"ai\";\nimport { Emitter } from \"@/emitter/emitter.js\";\nimport {\n  AssistantMessage,\n  CustomMessage,\n  Message,\n  SystemMessage,\n  ToolMessage,\n  UserMessage,\n} from \"@/backend/message.js\";\nimport { GetRunContext } from \"@/context.js\";\nimport { ValueError } from \"@/errors.js\";\nimport { isEmpty, mapToObj, toCamelCase } from \"remeda\";\nimport { FullModelName } from \"@/backend/utils.js\";\nimport { ChatModelError } from \"@/backend/errors.js\";\nimport { z, ZodArray, ZodEnum, ZodSchema } from \"zod\";\nimport { Tool } from \"@/tools/base.js\";\nimport { encodeCustomMessage } from \"@/adapters/vercel/backend/utils.js\";\n\nexport abstract class VercelChatModel<\n  M extends LanguageModelV1 = LanguageModelV1,\n> extends ChatModel {\n  public readonly emitter: Emitter<ChatModelEvents>;\n  public readonly supportsToolStreaming: boolean = true;\n\n  constructor(private readonly model: M) {\n    super();\n    if (!this.modelId) {\n      throw new ValueError(\"No modelId has been provided!\");\n    }\n    this.emitter = Emitter.root.child({\n      namespace: [\"backend\", this.providerId, \"chat\"],\n      creator: this,\n    });\n  }\n\n  get modelId(): string {\n    return this.model.modelId;\n  }\n\n  get providerId(): string {\n    const provider = this.model.provider.split(\".\")[0].split(\"-\")[0];\n    return toCamelCase(provider);\n  }\n\n  protected async _create(input: ChatModelInput, run: GetRunContext<this>) {\n    const responseFormat = input.responseFormat;\n    if (responseFormat && (responseFormat instanceof ZodSchema || responseFormat.schema)) {\n      const { output } = await this._createStructure(\n        {\n          ...input,\n          schema: responseFormat,\n        },\n        run,\n      );\n      return output;\n    }\n\n    const {\n      finishReason,\n      usage,\n      response: { messages },\n    } = await generateText(await this.transformInput(input));\n\n    return new ChatModelOutput(this.transformMessages(messages), usage, finishReason);\n  }\n\n  protected async _createStructure<T>(\n    { schema, ...input }: ChatModelObjectInput<T>,\n    run: GetRunContext<this>,\n  ): Promise<ChatModelObjectOutput<T>> {\n    const response = await generateObject<T>({\n      temperature: 0,\n      ...(await this.transformInput(input)),\n      abortSignal: run.signal,\n      model: this.model,\n      ...(schema instanceof ZodSchema\n        ? {\n            schema,\n            output: ((schema._input || schema) instanceof ZodArray\n              ? \"array\"\n              : (schema._input || schema) instanceof ZodEnum\n                ? \"enum\"\n                : \"object\") as any,\n          }\n        : {\n            schema: schema.schema ? jsonSchema<T>(schema.schema) : z.any(),\n            schemaName: schema.name,\n            schemaDescription: schema.description,\n          }),\n    });\n\n    return {\n      object: response.object,\n      output: new ChatModelOutput(\n        [new AssistantMessage(JSON.stringify(response.object, null, 2))],\n        response.usage,\n        response.finishReason,\n      ),\n    };\n  }\n\n  async *_createStream(input: ChatModelInput, run: GetRunContext<this>) {\n    if (!this.supportsToolStreaming && !isEmpty(input.tools ?? [])) {\n      const response = await this._create(input, run);\n      yield response;\n      return;\n    }\n\n    const { fullStream, usage, finishReason, response } = streamText({\n      ...(await this.transformInput(input)),\n      abortSignal: run.signal,\n    });\n\n    let lastChunk: ChatModelOutput | null = null;\n    for await (const event of fullStream) {\n      let message: Message;\n      switch (event.type) {\n        case \"text-delta\":\n          message = new AssistantMessage(event.textDelta);\n          break;\n        case \"tool-call\":\n          message = new AssistantMessage({\n            type: event.type,\n            toolCallId: event.toolCallId,\n            toolName: event.toolName,\n            args: event.args,\n          });\n          break;\n        case \"error\":\n          throw new ChatModelError(\"Unhandled error\", [event.error as Error]);\n        case \"step-finish\":\n        case \"step-start\":\n          continue;\n        case \"tool-result\":\n          message = new ToolMessage({\n            type: event.type,\n            toolCallId: event.toolCallId,\n            toolName: event.toolName,\n            result: event.result,\n          });\n          break;\n        case \"tool-call-streaming-start\":\n        case \"tool-call-delta\":\n          continue;\n        case \"finish\":\n          continue;\n        default:\n          throw new Error(`Unhandled event \"${event.type}\"`);\n      }\n      lastChunk = new ChatModelOutput([message]);\n      yield lastChunk;\n    }\n\n    if (!lastChunk) {\n      throw new ChatModelError(\"No chunks have been received!\");\n    }\n    lastChunk.usage = await usage;\n    lastChunk.finishReason = await finishReason;\n    await response;\n  }\n\n  protected async transformInput(\n    input: ChatModelInput,\n  ): Promise<Parameters<typeof generateText<Record<string, any>>>[0]> {\n    const tools = await Promise.all(\n      (input.tools ?? []).map(async (tool) => ({\n        name: tool.name,\n        description: tool.description,\n        parameters: jsonSchema(await tool.getInputJsonSchema()),\n      })),\n    );\n\n    const messages = input.messages.map((msg): CoreMessage => {\n      if (msg instanceof CustomMessage) {\n        msg = encodeCustomMessage(msg);\n      }\n\n      if (msg instanceof AssistantMessage) {\n        return { role: \"assistant\", content: msg.content };\n      } else if (msg instanceof ToolMessage) {\n        return { role: \"tool\", content: msg.content };\n      } else if (msg instanceof UserMessage) {\n        return { role: \"user\", content: msg.content };\n      } else if (msg instanceof SystemMessage) {\n        return { role: \"system\", content: msg.content.map((part) => part.text).join(\"\\n\") };\n      }\n      return { role: msg.role, content: msg.content } as CoreMessage;\n    });\n\n    let toolChoice: ToolChoice<Record<string, any>> | undefined;\n    if (input.toolChoice && input.toolChoice instanceof Tool) {\n      if (this.toolChoiceSupport.includes(\"single\")) {\n        toolChoice = {\n          type: \"tool\",\n          toolName: input.toolChoice.name,\n        };\n      } else {\n        this.logger.warn(`The single tool choice is not supported.`);\n      }\n    } else if (input.toolChoice) {\n      if (this.toolChoiceSupport.includes(input.toolChoice)) {\n        toolChoice = input.toolChoice;\n      } else {\n        this.logger.warn(`The following tool choice value '${input.toolChoice}' is not supported.`);\n      }\n    }\n\n    return {\n      ...this.parameters,\n      ...input,\n      toolChoice,\n      model: this.model,\n      tools: mapToObj(tools, ({ name, ...tool }) => [name, tool]),\n      messages,\n    };\n  }\n\n  protected transformMessages(messages: (CoreAssistantMessage | CoreToolMessage)[]): Message[] {\n    return messages.flatMap((msg) => {\n      if (msg.role === \"tool\") {\n        return new ToolMessage(msg.content, msg.providerOptions);\n      }\n      return new AssistantMessage(\n        msg.content as TextPart | ToolCallPart | string,\n        msg.providerOptions,\n      );\n    });\n  }\n\n  createSnapshot() {\n    return {\n      ...super.createSnapshot(),\n      providerId: this.providerId,\n      modelId: this.modelId,\n      supportsToolStreaming: this.supportsToolStreaming,\n    };\n  }\n\n  async loadSnapshot({ providerId, modelId, ...snapshot }: ReturnType<typeof this.createSnapshot>) {\n    const instance = await ChatModel.fromName(`${providerId}:${modelId}` as FullModelName);\n    if (!(instance instanceof VercelChatModel)) {\n      throw new Error(\"Incorrect deserialization!\");\n    }\n    instance.destroy();\n    Object.assign(this, {\n      ...snapshot,\n      model: instance.model,\n    });\n  }\n}\n"]}