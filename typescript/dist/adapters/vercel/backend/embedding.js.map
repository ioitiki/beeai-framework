{"version":3,"sources":["embedding.ts"],"names":["VercelEmbeddingModel","EmbeddingModel","emitter","constructor","model","Emitter","root","child","namespace","providerId","creator","modelId","provider","split","toCamelCase","_create","input","run","embedMany","values","abortSignal","signal","createSnapshot","loadSnapshot","snapshot","instance","fromName","Error","destroy","Object","assign"],"mappings":";;;;;;;AA8BO,MAAMA,6BAEHC,cAAAA,CAAAA;EAhCV;;;;AAiCkBC,EAAAA,OAAAA;AAEhBC,EAAAA,WAAAA,CAA4BC,KAAU,EAAA;AACpC,IAAK,KAAA,EAAA,EAAA,KADqBA,KAAAA,GAAAA,KAAAA;AAE1B,IAAKF,IAAAA,CAAAA,OAAAA,GAAUG,OAAQC,CAAAA,IAAAA,CAAKC,KAAM,CAAA;MAChCC,SAAW,EAAA;AAAC,QAAA,SAAA;QAAW,IAAKC,CAAAA,UAAAA;AAAY,QAAA;;MACxCC,OAAS,EAAA;KACX,CAAA;AACF;AAEA,EAAA,IAAIC,OAAkB,GAAA;AACpB,IAAA,OAAO,KAAKP,KAAMO,CAAAA,OAAAA;AACpB;AAEA,EAAA,IAAIF,UAAqB,GAAA;AACvB,IAAA,MAAMG,QAAW,GAAA,IAAA,CAAKR,KAAMQ,CAAAA,QAAAA,CAASC,KAAM,CAAA,GAAA,CAAK,CAAA,CAAA,CAAGA,CAAAA,KAAAA,CAAM,GAAA,CAAA,CAAK,CAAA,CAAA;AAC9D,IAAA,OAAOC,YAAYF,QAAAA,CAAAA;AACrB;EAEA,MAAgBG,OAAAA,CACdC,OACAC,GAC+B,EAAA;AAC/B,IAAA,OAAOC,SAAkB,CAAA;AACvBd,MAAAA,KAAAA,EAAO,IAAKA,CAAAA,KAAAA;AACZe,MAAAA,MAAAA,EAAQH,KAAMG,CAAAA,MAAAA;AACdC,MAAAA,WAAAA,EAAaH,GAAII,CAAAA;KACnB,CAAA;AACF;EAEAC,cAAiB,GAAA;AACf,IAAO,OAAA;AACL,MAAA,GAAG,MAAMA,cAAAA,EAAAA;AACTb,MAAAA,UAAAA,EAAY,IAAKA,CAAAA,UAAAA;AACjBE,MAAAA,OAAAA,EAAS,IAAKP,CAAAA;AAChB,KAAA;AACF;AAEA,EAAA,MAAMmB,aAAa,EAAEd,UAAAA,EAAYE,OAAS,EAAA,GAAGa,UAAoD,EAAA;AAC/F,IAAMC,MAAAA,QAAAA,GAAW,MAAMzB,oBAAqB0B,CAAAA,QAAAA,CAC1C,GAAGjB,UAAAA,CAAAA,CAAAA,EAAcE,OAAAA,CAAS,CAAA,CAAA;AAE5B,IAAI,IAAA,EAAEc,oBAAoBzB,oBAAuB,CAAA,EAAA;AAC/C,MAAM,MAAA,IAAI2B,MAAM,4BAAA,CAAA;AAClB;AACAF,IAAAA,QAAAA,CAASG,OAAO,EAAA;AAChBC,IAAAA,MAAAA,CAAOC,OAAO,IAAM,EAAA;MAClB,GAAGN,QAAAA;AACHpB,MAAAA,KAAAA,EAAOqB,QAASrB,CAAAA;KAClB,CAAA;AACF;AACF","file":"embedding.js","sourcesContent":["/**\n * Copyright 2025 Â© BeeAI a Series of LF Projects, LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  EmbeddingModel,\n  EmbeddingModelInput,\n  EmbeddingModelOutput,\n  EmbeddingModelEvents,\n} from \"@/backend/embedding.js\";\nimport { embedMany, EmbeddingModel as Model } from \"ai\";\nimport { Emitter } from \"@/emitter/emitter.js\";\nimport { GetRunContext } from \"@/context.js\";\nimport { toCamelCase } from \"remeda\";\nimport { FullModelName } from \"@/backend/utils.js\";\n\ntype InternalEmbeddingModel = Model<string>;\n\nexport class VercelEmbeddingModel<\n  R extends InternalEmbeddingModel = InternalEmbeddingModel,\n> extends EmbeddingModel {\n  public readonly emitter: Emitter<EmbeddingModelEvents>;\n\n  constructor(public readonly model: R) {\n    super();\n    this.emitter = Emitter.root.child({\n      namespace: [\"backend\", this.providerId, \"embedding\"],\n      creator: this,\n    });\n  }\n\n  get modelId(): string {\n    return this.model.modelId;\n  }\n\n  get providerId(): string {\n    const provider = this.model.provider.split(\".\")[0].split(\"-\")[0];\n    return toCamelCase(provider);\n  }\n\n  protected async _create(\n    input: EmbeddingModelInput,\n    run: GetRunContext<this>,\n  ): Promise<EmbeddingModelOutput> {\n    return embedMany<string>({\n      model: this.model,\n      values: input.values,\n      abortSignal: run.signal,\n    });\n  }\n\n  createSnapshot() {\n    return {\n      ...super.createSnapshot(),\n      providerId: this.providerId,\n      modelId: this.model,\n    };\n  }\n\n  async loadSnapshot({ providerId, modelId, ...snapshot }: ReturnType<typeof this.createSnapshot>) {\n    const instance = await VercelEmbeddingModel.fromName(\n      `${providerId}:${modelId}` as FullModelName,\n    );\n    if (!(instance instanceof VercelEmbeddingModel)) {\n      throw new Error(\"Incorrect deserialization!\");\n    }\n    instance.destroy();\n    Object.assign(this, {\n      ...snapshot,\n      model: instance.model,\n    });\n  }\n}\n"]}