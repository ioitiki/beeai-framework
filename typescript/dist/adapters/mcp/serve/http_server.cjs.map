{"version":3,"sources":["http_server.ts"],"names":["logger","Logger","root","child","name","runServer","server","hostname","port","app","express","use","json","transports","all","req","res","debug","method","sessionId","headers","transport","existingTransport","StreamableHTTPServerTransport","status","jsonrpc","error","code","message","id","isInitializeRequest","body","eventStore","InMemoryEventStore","sessionIdGenerator","randomUUID","onsessioninitialized","onclose","sid","connect","handleRequest","headersSent","get","info","SSEServerTransport","on","post","query","handlePostMessage","send","listen","process","close","exit"],"mappings":"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","file":"http_server.cjs","sourcesContent":["/**\n * Copyright 2025 Â© BeeAI a Series of LF Projects, LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n// Taken from: https://github.com/modelcontextprotocol/typescript-sdk/blob/main/src/examples/server/sseAndStreamableHttpCompatibleServer.ts\n\nimport express, { Request, Response } from \"express\";\nimport { SSEServerTransport } from \"@modelcontextprotocol/sdk/server/sse.js\";\nimport { StreamableHTTPServerTransport } from \"@modelcontextprotocol/sdk/server/streamableHttp.js\";\nimport { isInitializeRequest } from \"@modelcontextprotocol/sdk/types.js\";\nimport { InMemoryEventStore } from \"./in_memory_store.js\";\nimport { randomUUID } from \"node:crypto\";\nimport { McpServer } from \"@modelcontextprotocol/sdk/server/mcp.js\";\nimport { Logger } from \"@/logger/logger.js\";\n\nconst logger = Logger.root.child({\n  name: \"MCP HTTP server\",\n});\n\nexport function runServer(server: McpServer, hostname = \"127.0.0.1\", port = 3000) {\n  // Create Express application\n  const app = express();\n  app.use(express.json());\n\n  // Store transports by session ID\n  const transports: Record<string, StreamableHTTPServerTransport | SSEServerTransport> = {};\n\n  //=============================================================================\n  // STREAMABLE HTTP TRANSPORT (PROTOCOL VERSION 2025-03-26)\n  //=============================================================================\n\n  // Handle all MCP Streamable HTTP requests (GET, POST, DELETE) on a single endpoint\n  app.all(\"/mcp\", async (req: Request, res: Response) => {\n    logger.debug(`Received ${req.method} request to /mcp`);\n\n    try {\n      // Check for existing session ID\n      const sessionId = req.headers[\"mcp-session-id\"] as string | undefined;\n      let transport: StreamableHTTPServerTransport;\n\n      if (sessionId && transports[sessionId]) {\n        // Check if the transport is of the correct type\n        const existingTransport = transports[sessionId];\n        if (existingTransport instanceof StreamableHTTPServerTransport) {\n          // Reuse existing transport\n          transport = existingTransport;\n        } else {\n          // Transport exists but is not a StreamableHTTPServerTransport (could be SSEServerTransport)\n          res.status(400).json({\n            jsonrpc: \"2.0\",\n            error: {\n              code: -32000,\n              message: \"Bad Request: Session exists but uses a different transport protocol\",\n            },\n            id: null,\n          });\n          return;\n        }\n      } else if (!sessionId && req.method === \"POST\" && isInitializeRequest(req.body)) {\n        const eventStore = new InMemoryEventStore();\n        transport = new StreamableHTTPServerTransport({\n          sessionIdGenerator: () => randomUUID(),\n          eventStore, // Enable resumability\n          onsessioninitialized: (sessionId) => {\n            // Store the transport by session ID when session is initialized\n            logger.debug(`StreamableHTTP session initialized with ID: ${sessionId}`);\n            transports[sessionId] = transport;\n          },\n        });\n\n        // Set up onclose handler to clean up transport when closed\n        transport.onclose = () => {\n          const sid = transport.sessionId;\n          if (sid && transports[sid]) {\n            logger.debug(`Transport closed for session ${sid}, removing from transports map`);\n            // eslint-disable-next-line @typescript-eslint/no-dynamic-delete\n            delete transports[sid];\n          }\n        };\n\n        // Connect the transport to the MCP server\n        await server.connect(transport);\n      } else {\n        // Invalid request - no session ID or not initialization request\n        res.status(400).json({\n          jsonrpc: \"2.0\",\n          error: {\n            code: -32000,\n            message: \"Bad Request: No valid session ID provided\",\n          },\n          id: null,\n        });\n        return;\n      }\n\n      // Handle the request with the transport\n      await transport.handleRequest(req, res, req.body);\n    } catch (error) {\n      logger.error(\"Error handling MCP request:\", error);\n      if (!res.headersSent) {\n        res.status(500).json({\n          jsonrpc: \"2.0\",\n          error: {\n            code: -32603,\n            message: \"Internal server error\",\n          },\n          id: null,\n        });\n      }\n    }\n  });\n\n  //=============================================================================\n  // DEPRECATED HTTP+SSE TRANSPORT (PROTOCOL VERSION 2024-11-05)\n  //=============================================================================\n\n  app.get(\"/sse\", async (req: Request, res: Response) => {\n    logger.info(\"Received GET request to /sse (deprecated SSE transport)\");\n    const transport = new SSEServerTransport(\"/messages\", res);\n    transports[transport.sessionId] = transport;\n    res.on(\"close\", () => {\n      // eslint-disable-next-line @typescript-eslint/no-dynamic-delete\n      delete transports[transport.sessionId];\n    });\n    await server.connect(transport);\n  });\n\n  app.post(\"/messages\", async (req: Request, res: Response) => {\n    const sessionId = req.query.sessionId as string;\n    let transport: SSEServerTransport;\n    const existingTransport = transports[sessionId];\n    if (existingTransport instanceof SSEServerTransport) {\n      // Reuse existing transport\n      transport = existingTransport;\n    } else {\n      // Transport exists but is not a SSEServerTransport (could be StreamableHTTPServerTransport)\n      res.status(400).json({\n        jsonrpc: \"2.0\",\n        error: {\n          code: -32000,\n          message: \"Bad Request: Session exists but uses a different transport protocol\",\n        },\n        id: null,\n      });\n      return;\n    }\n    if (transport) {\n      await transport.handlePostMessage(req, res, req.body);\n    } else {\n      res.status(400).send(\"No transport found for sessionId\");\n    }\n  });\n\n  // Start the server\n  app.listen(port, hostname, () => {\n    logger.info(`Backwards compatible MCP server listening on port ${hostname}:${port}`);\n    logger.debug(`\n    ==============================================\n    SUPPORTED TRANSPORT OPTIONS:\n\n    1. Streamable Http(Protocol version: 2025-03-26)\n    Endpoint: /mcp\n    Methods: GET, POST, DELETE\n    Usage: \n        - Initialize with POST to /mcp\n        - Establish SSE stream with GET to /mcp\n        - Send requests with POST to /mcp\n        - Terminate session with DELETE to /mcp\n\n    2. Http + SSE (Protocol version: 2024-11-05)\n    Endpoints: /sse (GET) and /messages (POST)\n    Usage:\n        - Establish SSE stream with GET to /sse\n        - Send requests with POST to /messages?sessionId=<id>\n    ==============================================\n    `);\n  });\n\n  // Handle server shutdown\n  process.on(\"SIGINT\", async () => {\n    logger.info(\"Shutting down server...\");\n\n    // Close all active transports to properly clean up resources\n    for (const sessionId in transports) {\n      try {\n        logger.debug(`Closing transport for session ${sessionId}`);\n        await transports[sessionId].close();\n        // eslint-disable-next-line @typescript-eslint/no-dynamic-delete\n        delete transports[sessionId];\n      } catch (error) {\n        logger.error(`Error closing transport for session ${sessionId}:`, error);\n      }\n    }\n    logger.debug(\"Server shutdown complete\");\n    process.exit(0);\n  });\n}\n"]}