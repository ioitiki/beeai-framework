{"version":3,"sources":["server.ts"],"names":["MCPServerConfig","transport","hostname","port","name","version","settings","constructor","partial","Object","assign","MCPServer","Server","server","config","McpServer","serve","member","members","factory","getFactory","entry","type","tool","description","paramsSchema","callback","prompt","argsSchema","resource","uri","template","ValueError","runServer","connect","StdioServerTransport","factories","has","Tool","get","toolFactory","schema","inputSchema","ZodType","shape","args","result","run","content","text","getTextContent","registerFactory"],"mappings":";;;;;;;;;;;;AAyEO,MAAMA,eAAAA,CAAAA;EAzEb;;;EA0EEC,SAA6B,GAAA,OAAA;EAC7BC,QAAW,GAAA,WAAA;EACXC,IAAO,GAAA,GAAA;EACPC,IAAO,GAAA,YAAA;EACPC,OAAU,GAAA,OAAA;AACVC,EAAAA,QAAAA;AAEAC,EAAAA,WAAAA,CAAYC,OAAoC,EAAA;AAC9C,IAAA,IAAIA,OAAS,EAAA;AACXC,MAAOC,MAAAA,CAAAA,MAAAA,CAAO,MAAMF,OAAAA,CAAAA;AACtB;AACF;AACF;AAEO,MAAMG,kBAAkBC,iBAAAA,CAAAA;EAxF/B;;;AAyFYC,EAAAA,MAAAA;AAEVN,EAAAA,WAAAA,CAAYO,MAA0B,EAAA;AACpC,IAAMA,KAAAA,CAAAA,MAAAA,IAAU,IAAId,eAAAA,EAAAA,CAAAA;AACpB,IAAKa,IAAAA,CAAAA,MAAAA,GAAS,IAAIE,gBAAU,CAAA;AAC1BX,MAAAA,IAAAA,EAAM,KAAKU,MAAOV,CAAAA,IAAAA;AAClBC,MAAAA,OAAAA,EAAS,KAAKS,MAAOT,CAAAA,OAAAA;AACrB,MAAA,GAAG,KAAKS,MAAOR,CAAAA;KACjB,CAAA;AACF;AAEA,EAAA,MAAMU,KAAQ,GAAA;AACZ,IAAWC,KAAAA,MAAAA,MAAAA,IAAU,KAAKC,OAAS,EAAA;AACjC,MAAMC,MAAAA,OAAAA,GAAU,IAAKC,CAAAA,UAAAA,CAAWH,MAAAA,CAAAA;AAChC,MAAMI,MAAAA,KAAAA,GAAQ,MAAMF,OAAAA,CAAQF,MAAAA,CAAAA;AAE5B,MAAA,QAAQI,MAAMC,IAAI;QAChB,KAAK,MAAA;AACH,UAAKT,IAAAA,CAAAA,MAAAA,CAAOU,KAAKF,KAAMjB,CAAAA,IAAAA,EAAMiB,MAAMG,WAAaH,EAAAA,KAAAA,CAAMI,YAAcJ,EAAAA,KAAAA,CAAMK,QAAQ,CAAA;AAClF,UAAA;QACF,KAAK,QAAA;AACH,UAAA,IAAI,gBAAgBL,KAAO,EAAA;AACzB,YAAKR,IAAAA,CAAAA,MAAAA,CAAOc,OAAON,KAAMjB,CAAAA,IAAAA,EAAMiB,MAAMG,WAAaH,EAAAA,KAAAA,CAAMO,UAAYP,EAAAA,KAAAA,CAAMK,QAAQ,CAAA;WAC7E,MAAA;AACL,YAAA,IAAA,CAAKb,OAAOc,MAAON,CAAAA,KAAAA,CAAMjB,MAAMiB,KAAMG,CAAAA,WAAAA,EAAaH,MAAMK,QAAQ,CAAA;AAClE;AACA,UAAA;QACF,KAAK,UAAA;AACH,UAAA,IAAI,SAASL,KAAO,EAAA;AAClB,YAAA,IAAA,CAAKR,OAAOgB,QAASR,CAAAA,KAAAA,CAAMjB,MAAMiB,KAAMS,CAAAA,GAAAA,EAAKT,MAAMK,QAAQ,CAAA;WACrD,MAAA;AACL,YAAA,IAAA,CAAKb,OAAOgB,QAASR,CAAAA,KAAAA,CAAMjB,MAAMiB,KAAMU,CAAAA,QAAAA,EAAUV,MAAMK,QAAQ,CAAA;AACjE;AACA,UAAA;AACF,QAAA;AACE,UAAM,MAAA,IAAIM,sBAAW,6CAAA,CAAA;AACzB;AACF;AAEA,IAAI,IAAA,IAAA,CAAKlB,MAAOb,CAAAA,SAAAA,KAAc,KAAO,EAAA;AACnCgC,MAAAA,yBAAAA,CAAU,KAAKpB,MAAQ,EAAA,IAAA,CAAKC,OAAOZ,QAAU,EAAA,IAAA,CAAKY,OAAOX,IAAI,CAAA;KACxD,MAAA;AACL,MAAA,MAAM,IAAKU,CAAAA,MAAAA,CAAOqB,OAAQ,CAAA,IAAIC,+BAAAA,CAAAA;AAChC;AACF;AAEAf,EAAAA,UAAAA,CAAWH,MAAa,EAAA;AACtB,IAAMmB,MAAAA,SAAAA,GAAa,KAAK7B,WAA8B6B,CAAAA,SAAAA;AACtD,IAAA,OAAO,CAACA,SAAUC,CAAAA,GAAAA,CAAIpB,OAAOV,WAAW,CAAA,IAAKU,kBAAkBqB,aAAQF,IAAAA,SAAAA,CAAUC,GAAIC,CAAAA,aAAAA,IACjFF,SAAUG,CAAAA,GAAAA,CAAID,aAAAA,CACd,GAAA,KAAA,CAAMlB,WAAWH,MAAAA,CAAAA;AACvB;AACF;AAEA,eAAeuB,YAAYjB,IAAa,EAAA;AACtC,EAAMkB,MAAAA,MAAAA,GAAS,MAAMlB,IAAAA,CAAKmB,WAAW,EAAA;AACrC,EAAI,IAAA,EAAED,kBAAkBE,WAAU,CAAA,EAAA;AAChC,IAAM,MAAA,IAAIX,sBAAW,4CAAA,CAAA;AACvB;AACA,EAAA,MAAMP,eAAegB,MAAOG,CAAAA,KAAAA;AAC5B,EAAO,OAAA;IACLtB,IAAM,EAAA,MAAA;AACNlB,IAAAA,IAAAA,EAAMmB,IAAKnB,CAAAA,IAAAA;AACXoB,IAAAA,WAAAA,EAAaD,IAAKC,CAAAA,WAAAA;AAClBC,IAAAA,YAAAA;AACAC,IAAAA,QAAAA,mCAAoBmB,IAAAA,KAAAA;AAClB,MAAA,MAAMC,MAAS,GAAA,MAAMvB,IAAKwB,CAAAA,GAAAA,CAAG,GAAIF,IAAAA,CAAAA;AACjC,MAAO,OAAA;QACLG,OAAS,EAAA;AACP,UAAA;YACE1B,IAAM,EAAA,MAAA;AACN2B,YAAAA,IAAAA,EAAMH,OAAOI,cAAc;AAC7B;;AAEJ,OAAA;KATQ,EAAA,UAAA;AAWZ,GAAA;AACF;AAvBeV,MAAAA,CAAAA,WAAAA,EAAAA,aAAAA,CAAAA;AAyBf7B,SAAUwC,CAAAA,eAAAA,CAAgBb,eAAME,WAAAA,CAAAA","file":"server.cjs","sourcesContent":["/**\n * Copyright 2025 Â© BeeAI a Series of LF Projects, LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ValueError } from \"@/errors.js\";\nimport { Server } from \"@/serve/server.js\";\nimport { ServerOptions } from \"@modelcontextprotocol/sdk/server/index.js\";\nimport {\n  McpServer,\n  PromptCallback,\n  ReadResourceCallback,\n  ReadResourceTemplateCallback,\n  ResourceTemplate,\n  ToolCallback,\n} from \"@modelcontextprotocol/sdk/server/mcp.js\";\nimport { StdioServerTransport } from \"@modelcontextprotocol/sdk/server/stdio.js\";\nimport { AnyTool, Tool } from \"@/tools/base.js\";\nimport { runServer } from \"./http_server.js\";\nimport { ZodRawShape, ZodType } from \"zod\";\nimport { ToolAnnotations } from \"@modelcontextprotocol/sdk/types.js\";\n\ntype MCPServerPrompt =\n  | {\n      type: \"prompt\";\n      name: string;\n      description: string;\n      callback: PromptCallback;\n    }\n  | {\n      type: \"prompt\";\n      name: string;\n      description: string;\n      argsSchema: ZodRawShape;\n      callback: PromptCallback<ZodRawShape>;\n    };\n\ntype MCPServerResource =\n  | {\n      type: \"resource\";\n      name: string;\n      uri: string;\n      callback: ReadResourceCallback;\n    }\n  | {\n      type: \"resource\";\n      name: string;\n      template: ResourceTemplate;\n      callback: ReadResourceTemplateCallback;\n    };\n\ninterface MCPServerTool {\n  type: \"tool\";\n  name: string;\n  description: string;\n  paramsSchema: ZodRawShape | ToolAnnotations;\n  callback: ToolCallback<ZodRawShape>;\n}\n\ntype MCPServerEntry = MCPServerPrompt | MCPServerResource | MCPServerTool;\n\n//  Configuration for the MCPServer.\nexport class MCPServerConfig {\n  transport: \"stdio\" | \"sse\" = \"stdio\";\n  hostname = \"127.0.0.1\";\n  port = 3000;\n  name = \"MCP Server\";\n  version = \"1.0.0\";\n  settings?: ServerOptions;\n\n  constructor(partial?: Partial<MCPServerConfig>) {\n    if (partial) {\n      Object.assign(this, partial);\n    }\n  }\n}\n\nexport class MCPServer extends Server<any, MCPServerEntry, MCPServerConfig> {\n  protected server: McpServer;\n\n  constructor(config?: MCPServerConfig) {\n    super(config || new MCPServerConfig());\n    this.server = new McpServer({\n      name: this.config.name,\n      version: this.config.version,\n      ...this.config.settings,\n    });\n  }\n\n  async serve() {\n    for (const member of this.members) {\n      const factory = this.getFactory(member);\n      const entry = await factory(member);\n\n      switch (entry.type) {\n        case \"tool\":\n          this.server.tool(entry.name, entry.description, entry.paramsSchema, entry.callback);\n          break;\n        case \"prompt\":\n          if (\"argsSchema\" in entry) {\n            this.server.prompt(entry.name, entry.description, entry.argsSchema, entry.callback);\n          } else {\n            this.server.prompt(entry.name, entry.description, entry.callback);\n          }\n          break;\n        case \"resource\":\n          if (\"uri\" in entry) {\n            this.server.resource(entry.name, entry.uri, entry.callback);\n          } else {\n            this.server.resource(entry.name, entry.template, entry.callback);\n          }\n          break;\n        default:\n          throw new ValueError(\"Input type is not supported by this server.\");\n      }\n    }\n\n    if (this.config.transport === \"sse\") {\n      runServer(this.server, this.config.hostname, this.config.port);\n    } else {\n      await this.server.connect(new StdioServerTransport());\n    }\n  }\n\n  getFactory(member: any) {\n    const factories = (this.constructor as typeof Server).factories;\n    return !factories.has(member.constructor) && member instanceof Tool && factories.has(Tool)\n      ? factories.get(Tool)!\n      : super.getFactory(member);\n  }\n}\n\nasync function toolFactory(tool: AnyTool): Promise<MCPServerEntry> {\n  const schema = await tool.inputSchema();\n  if (!(schema instanceof ZodType)) {\n    throw new ValueError(\"JsonSchema is not supported for MCP tools.\");\n  }\n  const paramsSchema = schema.shape;\n  return {\n    type: \"tool\",\n    name: tool.name,\n    description: tool.description,\n    paramsSchema: paramsSchema,\n    callback: async (...args: Parameters<typeof tool.run>) => {\n      const result = await tool.run(...args);\n      return {\n        content: [\n          {\n            type: \"text\",\n            text: result.getTextContent(),\n          },\n        ],\n      };\n    },\n  };\n}\n\nMCPServer.registerFactory(Tool, toolFactory);\n"]}