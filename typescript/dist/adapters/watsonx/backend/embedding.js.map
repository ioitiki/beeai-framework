{"version":3,"sources":["embedding.ts"],"names":["WatsonxEmbeddingModel","EmbeddingModel","client","emitter","providerId","constructor","modelId","getEnv","parameters","WatsonxClient","ensure","Emitter","root","child","namespace","creator","_create","input","response","instance","embedText","spaceId","projectId","inputs","values","return_options","input_text","embeddings","result","results","map","e","embedding","i","at","usage","tokens","input_token_count","createSnapshot","loadSnapshot","snapshot","Object","assign"],"mappings":";;;;;;;AA6BO,MAAMA,8BAA8BC,cAAAA,CAAAA;EA7B3C;;;;;AA8BqBC,EAAAA,MAAAA;AACHC,EAAAA,OAAAA;AAEhB,EAAA,IAAIC,UAAa,GAAA;AACf,IAAO,OAAA,SAAA;AACT;EAEAC,WACkBC,CAAAA,OAAAA,GAAkBC,OAChC,yBACA,EAAA,yCAAA,GAEcC,UAA8C,GAAA,IAC9DN,MACA,EAAA;AACA,IAAA,KAAA,EAAK,EAAA,IAAA,CAPWI,OAAAA,GAAAA,OAAAA,EAAAA,KAIAE,UAAAA,GAAAA,UAAAA;AAIhB,IAAKN,IAAAA,CAAAA,MAAAA,GAASO,aAAcC,CAAAA,MAAAA,CAAOR,MAAAA,CAAAA;AACnC,IAAKC,IAAAA,CAAAA,OAAAA,GAAUQ,OAAQC,CAAAA,IAAAA,CAAKC,KAAM,CAAA;MAChCC,SAAW,EAAA;AAAC,QAAA,SAAA;AAAW,QAAA,SAAA;AAAW,QAAA;;MAClCC,OAAS,EAAA;KACX,CAAA;AACF;AAEA,EAAA,MAAgBC,QAAQC,KAA2D,EAAA;AACjF,IAAA,MAAMC,QAAW,GAAA,MAAM,IAAKhB,CAAAA,MAAAA,CAAOiB,SAASC,SAAU,CAAA;AACpDd,MAAAA,OAAAA,EAAS,IAAKA,CAAAA,OAAAA;AACde,MAAAA,OAAAA,EAAS,KAAKnB,MAAOmB,CAAAA,OAAAA;AACrBC,MAAAA,SAAAA,EAAW,KAAKpB,MAAOoB,CAAAA,SAAAA;AACvBC,MAAAA,MAAAA,EAAQN,KAAMO,CAAAA,MAAAA;MACdhB,UAAY,EAAA;QACViB,cAAgB,EAAA;UAAEC,UAAY,EAAA;AAAK,SAAA;AACnC,QAAA,GAAG,IAAKlB,CAAAA;AACV;KACF,CAAA;AAEA,IAAMmB,MAAAA,UAAAA,GAAaT,SAASU,MAAOC,CAAAA,OAAAA,CAAQC,IAAI,CAACC,CAAAA,KAAMA,EAAEC,SAAS,CAAA;AACjE,IAAA,MAAMR,MAASN,GAAAA,QAAAA,CAASU,MAAOC,CAAAA,OAAAA,CAAQC,IAAI,CAACC,CAAAA,EAAGE,CAAMF,KAAAA,CAAAA,CAAEd,KAASA,IAAAA,KAAAA,CAAMO,MAAOU,CAAAA,EAAAA,CAAGD,CAAAA,CAAAA,CAAAA;AAEhF,IAAO,OAAA;AACLN,MAAAA,UAAAA;AACAH,MAAAA,MAAAA;MACAW,KAAO,EAAA;AACLC,QAAAA,MAAAA,EAAQlB,SAASU,MAAOS,CAAAA;AAC1B;AACF,KAAA;AACF;EAEAC,cAAiB,GAAA;AACf,IAAO,OAAA;AACL,MAAA,GAAG,MAAMA,cAAAA,EAAAA;AACThC,MAAAA,OAAAA,EAAS,IAAKA,CAAAA,OAAAA;AACdJ,MAAAA,MAAAA,EAAQ,IAAKA,CAAAA;AACf,KAAA;AACF;AAEAqC,EAAAA,YAAAA,CAAaC,QAAwD,EAAA;AACnEC,IAAOC,MAAAA,CAAAA,MAAAA,CAAO,MAAMF,QAAAA,CAAAA;AACtB;AACF","file":"embedding.js","sourcesContent":["/**\n * Copyright 2025 Â© BeeAI a Series of LF Projects, LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { WatsonxClient, WatsonxClientSettings } from \"@/adapters/watsonx/backend/client.js\";\nimport {\n  EmbeddingModel,\n  EmbeddingModelInput,\n  EmbeddingModelOutput,\n  EmbeddingModelEvents,\n} from \"@/backend/embedding.js\";\nimport { EmbeddingParameters as WXEmbeddingParameters } from \"@ibm-cloud/watsonx-ai/dist/watsonx-ai-ml/vml_v1.js\";\nimport { Emitter } from \"@/emitter/emitter.js\";\nimport { getEnv } from \"@/internals/env.js\";\n\nexport type WatsonxEmbeddingModelParameters = WXEmbeddingParameters;\n\nexport class WatsonxEmbeddingModel extends EmbeddingModel {\n  protected readonly client: WatsonxClient;\n  public readonly emitter: Emitter<EmbeddingModelEvents>;\n\n  get providerId() {\n    return \"watsonx\";\n  }\n\n  constructor(\n    public readonly modelId: string = getEnv(\n      \"WATSONX_EMBEDDING_MODEL\",\n      \"ibm/granite-embedding-107m-multilingual\",\n    ),\n    public readonly parameters: WatsonxEmbeddingModelParameters = {},\n    client?: WatsonxClient | WatsonxClientSettings,\n  ) {\n    super();\n    this.client = WatsonxClient.ensure(client);\n    this.emitter = Emitter.root.child({\n      namespace: [\"backend\", \"watsonx\", \"embedding\"],\n      creator: this,\n    });\n  }\n\n  protected async _create(input: EmbeddingModelInput): Promise<EmbeddingModelOutput> {\n    const response = await this.client.instance.embedText({\n      modelId: this.modelId,\n      spaceId: this.client.spaceId,\n      projectId: this.client.projectId,\n      inputs: input.values,\n      parameters: {\n        return_options: { input_text: true },\n        ...this.parameters,\n      },\n    });\n\n    const embeddings = response.result.results.map((e) => e.embedding);\n    const values = response.result.results.map((e, i) => e.input || input.values.at(i)!);\n\n    return {\n      embeddings,\n      values,\n      usage: {\n        tokens: response.result.input_token_count,\n      },\n    };\n  }\n\n  createSnapshot() {\n    return {\n      ...super.createSnapshot(),\n      modelId: this.modelId,\n      client: this.client,\n    };\n  }\n\n  loadSnapshot(snapshot: ReturnType<typeof this.createSnapshot>): void {\n    Object.assign(this, snapshot);\n  }\n}\n"]}