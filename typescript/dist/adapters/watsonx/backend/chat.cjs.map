{"version":3,"sources":["chat.ts"],"names":["Type","WatsonxAiMlVml_v1","WatsonxChatModel","ChatModel","client","emitter","toolChoiceSupport","providerId","constructor","modelId","getEnv","Emitter","root","child","namespace","creator","WatsonxClient","ensure","config","name","parameters","undefined","NotImplementedError","_create","input","run","result","instance","textChat","prepareInput","signal","messages","finishReason","usage","extractOutput","choices","ChatModelOutput","_createStream","stream","textChatStream","returnObject","raw","aborted","controller","abort","data","map","delta","choice","message","findLast","Boolean","finish_reason","completionTokens","completion_tokens","promptTokens","prompt_tokens","totalTokens","total_tokens","flatMap","content","msg","AssistantMessage","type","text","push","tool_calls","call","toolCallId","id","toolName","function","args","parseBrokenJson","arguments","refusal","filter","isTruthy","overrides","tools","Promise","all","tool","description","getInputJsonSchema","toolConfig","toolChoice","toolChoiceOption","Tool","includes","ToolMessage","role","JSON","stringify","tool_call_id","SystemMessage","toPlain","spaceId","projectId","isEmpty","responseFormat","JSON_OBJECT","topP","frequencyPenalty","temperature","n","maxTokens","presencePenalty","stop","stopSequences","seed","createSnapshot","shallowCopy","loadSnapshot","snapshot","Object","assign"],"mappings":"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","file":"chat.cjs","sourcesContent":["/**\n * Copyright 2025 Â© BeeAI a Series of LF Projects, LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  ChatConfig,\n  ChatModel,\n  ChatModelEmitter,\n  ChatModelInput,\n  ChatModelOutput,\n  ChatModelParameters,\n  ChatModelToolChoiceSupport,\n} from \"@/backend/chat.js\";\nimport { WatsonxClient, WatsonxClientSettings } from \"@/adapters/watsonx/backend/client.js\";\nimport { findLast, isEmpty, isTruthy } from \"remeda\";\nimport WatsonxAiMlVml_v1, {\n  TextChatMessages,\n  TextChatParameterTools,\n  TextChatParams,\n  TextChatResultChoice,\n  TextChatUsage,\n} from \"@ibm-cloud/watsonx-ai/dist/watsonx-ai-ml/vml_v1.js\";\nimport { shallowCopy } from \"@/serializer/utils.js\";\nimport { Emitter } from \"@/emitter/emitter.js\";\nimport { GetRunContext } from \"@/context.js\";\nimport { AssistantMessage, Message, SystemMessage, ToolMessage } from \"@/backend/message.js\";\nimport { ToolCallPart } from \"ai\";\nimport Type = WatsonxAiMlVml_v1.TextChatResponseFormat.Constants.Type;\nimport { parseBrokenJson } from \"@/internals/helpers/schema.js\";\nimport { getEnv } from \"@/internals/env.js\";\nimport { NotImplementedError } from \"@/errors.js\";\nimport { Tool } from \"@/tools/base.js\";\n\nexport class WatsonxChatModel extends ChatModel {\n  protected readonly client: WatsonxClient;\n  public readonly emitter: ChatModelEmitter = Emitter.root.child({\n    namespace: [\"backend\", \"watsonx\", \"chat\"],\n    creator: this,\n  });\n  public readonly toolChoiceSupport: ChatModelToolChoiceSupport[] = [\"none\", \"single\"];\n\n  get providerId() {\n    return \"watsonx\";\n  }\n\n  constructor(\n    public readonly modelId = getEnv(\"WATSONX_CHAT_MODEL\", \"ibm/granite-3-8b-instruct\"),\n    client?: WatsonxClient | WatsonxClientSettings,\n  ) {\n    super();\n    this.client = WatsonxClient.ensure(client);\n  }\n\n  config(config: ChatConfig) {\n    super.config(config);\n    for (const name of [\"topK\"] as (keyof ChatModelParameters)[]) {\n      if (this.parameters[name] !== undefined) {\n        this.parameters[name] = undefined;\n        throw new NotImplementedError(\n          `Setting \"${name}\" parameter is not supported for WatsonX Chat Models.`,\n        );\n      }\n    }\n    return this;\n  }\n\n  protected async _create(input: ChatModelInput, run: GetRunContext<any>) {\n    const { result } = await this.client.instance.textChat({\n      ...(await this.prepareInput(input)),\n      signal: run.signal,\n    });\n    const { messages, finishReason, usage } = this.extractOutput(result.choices, result.usage);\n    return new ChatModelOutput(messages, usage, finishReason);\n  }\n\n  async *_createStream(input: ChatModelInput, run: GetRunContext<this>) {\n    const stream = await this.client.instance.textChatStream({\n      ...(await this.prepareInput(input)),\n      signal: run.signal,\n      returnObject: true,\n    });\n    for await (const raw of stream) {\n      if (run.signal.aborted) {\n        stream.controller.abort(run.signal.aborted);\n        break;\n      }\n      const { messages, finishReason, usage } = this.extractOutput(\n        raw.data.choices.map(({ delta, ...choice }) => ({ ...choice, message: delta })),\n        raw.data.usage,\n      );\n      yield new ChatModelOutput(messages, usage, finishReason);\n    }\n  }\n\n  protected extractOutput(choices: TextChatResultChoice[], usage?: TextChatUsage) {\n    return {\n      finishReason: findLast(choices, (choice) => Boolean(choice?.finish_reason))\n        ?.finish_reason as ChatModelOutput[\"finishReason\"],\n      usage: usage\n        ? {\n            completionTokens: usage.completion_tokens ?? 0,\n            promptTokens: usage.prompt_tokens ?? 0,\n            totalTokens: usage.total_tokens ?? 0,\n          }\n        : undefined,\n      messages: choices\n        .flatMap(({ message }) => {\n          const messages: Message[] = [];\n          if (message?.content) {\n            const msg = new AssistantMessage({ type: \"text\", text: message.content });\n            // msg.role = message.role || msg.role;\n            messages.push(msg);\n          }\n          if (message?.tool_calls) {\n            const msg = new AssistantMessage(\n              message.tool_calls.map(\n                (call): ToolCallPart => ({\n                  type: \"tool-call\",\n                  toolCallId: call.id,\n                  toolName: call.function.name,\n                  args: parseBrokenJson(call.function.arguments),\n                }),\n              ),\n            );\n            // msg.role = message.role || msg.role;\n            messages.push(msg);\n          }\n          if (message?.refusal) {\n            const msg = new AssistantMessage({ type: \"text\", text: message.refusal });\n            // msg.role = message.role || msg.role;\n            messages.push(msg);\n          }\n          return messages;\n        })\n        .filter(isTruthy),\n    };\n  }\n\n  protected async prepareInput(overrides: ChatModelInput): Promise<TextChatParams> {\n    const input: ChatModelInput = { ...this.parameters, ...overrides };\n    const tools: TextChatParameterTools[] = await Promise.all(\n      (input.tools ?? []).map(async (tool) => ({\n        type: \"function\",\n        function: {\n          name: tool.name,\n          description: tool.description,\n          parameters: await tool.getInputJsonSchema(),\n        },\n      })),\n    );\n\n    const toolConfig: Pick<TextChatParams, \"toolChoice\" | \"toolChoiceOption\"> = {\n      toolChoice: undefined,\n      toolChoiceOption: undefined,\n    };\n    if (input.toolChoice) {\n      if (input.toolChoice instanceof Tool) {\n        toolConfig.toolChoice = {\n          type: \"function\",\n          function: { name: input.toolChoice.name },\n        };\n      } else if (this.toolChoiceSupport.includes(input.toolChoice)) {\n        toolConfig.toolChoiceOption = input.toolChoice;\n      }\n    }\n\n    return {\n      modelId: this.modelId,\n      messages: input.messages.flatMap((message): TextChatMessages[] => {\n        if (message instanceof ToolMessage) {\n          return message.content.map((content) => ({\n            role: \"tool\",\n            content: JSON.stringify(content.result),\n            tool_call_id: content.toolCallId,\n          }));\n        } else if (message instanceof SystemMessage) {\n          return message.content.map((content) => ({\n            role: \"system\",\n            content: content.text,\n          }));\n        } else if (message instanceof AssistantMessage) {\n          return message.content.map((content) => ({\n            role: \"assistant\",\n            ...(content.type === \"text\" && {\n              content: content.text,\n            }),\n            ...(content.type === \"tool-call\" && {\n              id: content.toolCallId,\n              type: \"function\",\n              function: {\n                name: content.toolName,\n                arguments: JSON.stringify(content.args),\n              },\n            }),\n          }));\n        } else {\n          return [message.toPlain()];\n        }\n      }),\n      spaceId: this.client.spaceId,\n      projectId: this.client.projectId,\n      tools: isEmpty(tools) ? undefined : tools,\n      responseFormat: undefined,\n      ...(input.responseFormat && {\n        responseFormat: { type: Type.JSON_OBJECT },\n      }),\n      topP: input.topP,\n      frequencyPenalty: input.frequencyPenalty,\n      temperature: input.temperature,\n      n: input.n,\n      maxTokens: input.maxTokens,\n      presencePenalty: input.presencePenalty,\n      stop: input.stopSequences,\n      seed: input.seed,\n      ...toolConfig,\n    };\n  }\n\n  createSnapshot() {\n    return {\n      ...super.createSnapshot(),\n      modelId: this.modelId,\n      parameters: shallowCopy(this.parameters),\n      client: this.client,\n    };\n  }\n\n  loadSnapshot(snapshot: ReturnType<typeof this.createSnapshot>) {\n    Object.assign(this, snapshot);\n  }\n}\n"]}