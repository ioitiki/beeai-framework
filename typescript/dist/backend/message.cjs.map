{"version":3,"sources":["message.ts"],"names":["isText","content","type","isImage","isFile","isToolCall","isToolResult","Message","Serializable","constructor","meta","createdAt","Date","fromString","Array","isArray","of","role","text","UserMessage","AssistantMessage","SystemMessage","ToolMessage","CustomMessage","getTexts","map","c","join","filter","createSnapshot","shallowCopy","loadSnapshot","snapshot","Object","assign","toPlain","merge","other","push","fromChunks","chunks","instance","forEach","chunk","Symbol","iterator","register","getToolCalls","getToolResults","success","data","z","object","literal","result","any","toolName","string","toolCallId","safeParse","ValueError","getImages","getFiles","Role","ASSISTANT","SYSTEM","USER","input"],"mappings":"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","file":"message.cjs","sourcesContent":["/**\n * Copyright 2025 Â© BeeAI a Series of LF Projects, LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Serializable } from \"@/internals/serializable.js\";\nimport { shallowCopy } from \"@/serializer/utils.js\";\nimport { FilePart, ImagePart, TextPart, ToolCallPart, ToolResultPart } from \"ai\";\nimport { z } from \"zod\";\nimport { ValueError } from \"@/errors.js\";\n\nexport type MessageRole = \"user\" | \"system\" | \"tool\" | \"assistant\";\nexport type MessageContentPart = TextPart | ToolCallPart | ImagePart | FilePart | ToolResultPart;\n\nexport interface MessageMeta {\n  [key: string]: any;\n  createdAt?: Date;\n}\n\nexport interface MessageInput {\n  role: MessageRole;\n  text: string; // TODO\n  meta?: MessageMeta;\n}\n\nfunction isText(content: MessageContentPart): content is TextPart {\n  return content.type === \"text\";\n}\nfunction isImage(content: MessageContentPart): content is ImagePart {\n  return content.type === \"image\";\n}\nfunction isFile(content: MessageContentPart): content is FilePart {\n  return content.type === \"file\";\n}\nfunction isToolCall(content: MessageContentPart): content is ToolCallPart {\n  return content.type === \"tool-call\";\n}\nfunction isToolResult(content: MessageContentPart): content is ToolResultPart {\n  return content.type === \"tool-result\";\n}\n\nexport abstract class Message<\n  T extends MessageContentPart = MessageContentPart,\n  R extends string = MessageRole | string,\n> extends Serializable {\n  public abstract readonly role: R;\n  public readonly content: T[];\n\n  constructor(\n    content: T | T[] | string,\n    public readonly meta: MessageMeta = {},\n  ) {\n    super();\n    if (!meta?.createdAt) {\n      meta.createdAt = new Date();\n    }\n    if (typeof content === \"string\") {\n      this.content = [this.fromString(content)];\n    } else {\n      this.content = Array.isArray(content) ? content : [content];\n    }\n  }\n\n  protected abstract fromString(input: string): T;\n\n  static of({ role, text, meta }: MessageInput): Message {\n    if (role === \"user\") {\n      return new UserMessage(text, meta);\n    } else if (role === \"assistant\") {\n      return new AssistantMessage(text, meta);\n    } else if (role === \"system\") {\n      return new SystemMessage(text, meta);\n    } else if (role === \"tool\") {\n      return new ToolMessage(text, meta);\n    } else {\n      return new CustomMessage(role, text, meta);\n    }\n  }\n\n  get text() {\n    return this.getTexts()\n      .map((c) => c.text)\n      .join(\"\");\n  }\n\n  getTexts() {\n    return this.content.filter(isText) as TextPart[];\n  }\n\n  createSnapshot() {\n    return { content: shallowCopy(this.content), meta: shallowCopy(this.meta), role: this.role };\n  }\n\n  loadSnapshot(snapshot: ReturnType<typeof this.createSnapshot>) {\n    Object.assign(this, snapshot);\n  }\n\n  toPlain() {\n    return { role: this.role, content: shallowCopy(this.content) } as const;\n  }\n\n  merge(other: Message<T, R>) {\n    Object.assign(this, other.meta);\n    this.content.push(...other.content);\n  }\n\n  static fromChunks<M2 extends Message>(this: new (...args: any[]) => M2, chunks: M2[]): M2 {\n    const instance = new this([]);\n    chunks.forEach((chunk) => instance.merge(chunk));\n    return instance;\n  }\n\n  [Symbol.iterator](): Iterator<T> {\n    return this.content[Symbol.iterator]();\n  }\n}\n\nexport class AssistantMessage extends Message<TextPart | ToolCallPart> {\n  public readonly role = \"assistant\";\n\n  static {\n    this.register();\n  }\n\n  getToolCalls() {\n    return this.content.filter(isToolCall);\n  }\n\n  protected fromString(text: string): TextPart {\n    return { type: \"text\", text };\n  }\n}\n\nexport class ToolMessage extends Message<ToolResultPart> {\n  public readonly role = \"tool\";\n\n  static {\n    this.register();\n  }\n\n  getToolResults() {\n    return this.content.filter(isToolResult);\n  }\n\n  protected fromString(text: string): ToolResultPart {\n    const { success, data } = z\n      .object({\n        type: z.literal(\"tool-result\"),\n        result: z.any(),\n        toolName: z.string(),\n        toolCallId: z.string(),\n      })\n      .safeParse(text);\n\n    if (!success) {\n      throw new ValueError(`ToolMessage cannot be created from '${text}'!`);\n    }\n\n    return data as ToolResultPart;\n  }\n}\n\nexport class SystemMessage extends Message<TextPart> {\n  public readonly role: MessageRole = \"system\";\n\n  static {\n    this.register();\n  }\n\n  protected fromString(text: string): TextPart {\n    return { type: \"text\", text };\n  }\n}\n\nexport class UserMessage extends Message<TextPart | ImagePart | FilePart> {\n  public readonly role = \"user\";\n\n  static {\n    this.register();\n  }\n\n  getImages() {\n    return this.content.filter(isImage);\n  }\n\n  getFiles() {\n    return this.content.filter(isFile);\n  }\n\n  protected fromString(text: string): TextPart {\n    return { type: \"text\", text };\n  }\n}\n\nexport const Role = {\n  ASSISTANT: \"assistant\",\n  SYSTEM: \"system\",\n  USER: \"user\",\n} as const;\n\nexport class CustomMessage extends Message<MessageContentPart, string> {\n  public role: string;\n\n  constructor(role: string, content: MessageContentPart | string, meta: MessageMeta = {}) {\n    super(content, meta);\n    if (!role) {\n      throw new ValueError(`Role \"${role}\" must be specified!`);\n    }\n    this.role = role;\n  }\n\n  protected fromString(input: string): MessageContentPart {\n    return { type: \"text\", text: input };\n  }\n}\n"]}