{"version":3,"sources":["chat.ts"],"names":["ChatModel","Serializable","cache","NullCache","parameters","logger","Logger","root","child","name","constructor","toolChoiceSupport","toolCallFallbackViaResponseFormat","modelSupportsToolCalling","create","input","shallowCopy","RunContext","enter","params","signal","abortSignal","run","tools","forceToolCallViaResponseFormat","shouldForceToolCallViaResponseFormat","isEmpty","responseFormat","generateToolUnionSchema","filterToolsByToolChoice","toolChoice","undefined","isToolChoiceSupported","warn","cacheEntry","createCacheAccessor","emitter","emit","chunks","generator","value","stream","_createStream","toAsyncGenerator","_create","controller","AbortController","push","callbacks","abort","aborted","resolve","result","ChatModelOutput","fromChunks","getToolCalls","lastMsg","messages","at","toolCall","parseBrokenJson","text","ChatModelError","isFatal","isRetryable","content","length","type","toolCallId","randomString","toLowerCase","toolName","args","error","reject","createStructure","_createStructure","config","isFunction","fromName","options","providerId","modelId","parseModel","Target","loadModel","schema","jsonSchema","toJsonSchema","systemTemplate","systemPromptTemplate","PromptTemplate","z","object","string","min","template","SystemMessage","render","JSON","stringify","errorTemplate","errors","expected","received","Retryable","executor","response","textResponse","getTextContent","pair","validator","createSchemaValidator","success","context","UserMessage","output","maxRetries","get","createSnapshot","slice","destroy","_","key","ObjectHashKeyFn","Serializer","serialize","map","msg","toPlain","isNew","task","Task","set","delete","Boolean","toolChoiceSupported","choice","Tool","includes","usage","finishReason","final","forEach","cur","merge","other","customMerge","totalTokens","takeBigger","promptTokens","completionTokens","filter","r","AssistantMessage","flatMap","getTextMessages","join","toString","loadSnapshot","snapshot","Object","assign"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;AAqIO,MAAeA,kBAAkBC,YAAAA,CAAAA;EArIxC;;;AAuISC,EAAAA,KAAAA,GAAwB,IAAIC,SAAAA,EAAAA;AAC5BC,EAAAA,UAAAA,GAAkC,EAAC;EACvBC,MAASC,GAAAA,MAAAA,CAAOC,KAAKC,KAAM,CAAA;AAC5CC,IAAAA,IAAAA,EAAM,KAAKC,WAAYD,CAAAA;GACzB,CAAA;EAEgBE,iBAAkD,GAAA;AAChE,IAAA,UAAA;AACA,IAAA,MAAA;AACA,IAAA,QAAA;AACA,IAAA;;EAEKC,iCAAoC,GAAA,IAAA;EAC3BC,wBAAoC,GAAA,IAAA;AAKpDC,EAAAA,MAAAA,CAAOC,KAA8C,EAAA;AACnDA,IAAAA,KAAAA,GAAQC,YAAYD,KAAAA,CAAAA;AAEpB,IAAOE,OAAAA,UAAAA,CAAWC,MAChB,IACA,EAAA;MAAEC,MAAQ,EAAA;AAACJ,QAAAA;;AAAiBK,MAAAA,MAAAA,EAAQL,KAAOM,EAAAA;AAAY,KAAA,EACvD,OAAOC,GAAAA,KAAAA;AACL,MAAI,IAAA,CAAC,KAAKT,wBAA0B,EAAA;AAClCE,QAAAA,KAAAA,CAAMQ,QAAQ,EAAA;AAChB;AAEA,MAAMC,MAAAA,8BAAAA,GAAiC,IAAKC,CAAAA,oCAAAA,CAAqCV,KAAAA,CAAAA;AACjF,MAAA,IAAIS,kCAAkCT,KAAMQ,CAAAA,KAAAA,IAAS,CAACG,OAAQX,CAAAA,KAAAA,CAAMQ,KAAK,CAAG,EAAA;AAC1ER,QAAMY,KAAAA,CAAAA,cAAAA,GAAiB,MAAMC,uBAC3BC,CAAAA,uBAAAA,CAAwBd,MAAMQ,KAAOR,EAAAA,KAAAA,CAAMe,UAAU,CAAA,CAAA;AAEvDf,QAAAA,KAAAA,CAAMe,UAAaC,GAAAA,MAAAA;AACrB;AAEA,MAAA,IAAI,CAAC,IAAA,CAAKC,qBAAsBjB,CAAAA,KAAAA,CAAMe,UAAU,CAAG,EAAA;AACjD,QAAA,IAAA,CAAKzB,MAAO4B,CAAAA,IAAAA,CACV,CAAoClB,iCAAAA,EAAAA,KAAAA,CAAMe,UAAU,CAA+B,6BAAA,CAAA,CAAA;AAErFf,QAAAA,KAAAA,CAAMe,UAAaC,GAAAA,MAAAA;AACrB;AAEA,MAAA,MAAMG,UAAa,GAAA,MAAM,IAAKC,CAAAA,mBAAAA,CAAoBpB,KAAAA,CAAAA;AAElD,MAAI,IAAA;AACF,QAAMO,MAAAA,GAAAA,CAAIc,OAAQC,CAAAA,IAAAA,CAAK,OAAS,EAAA;AAAEtB,UAAAA;SAAM,CAAA;AACxC,QAAA,MAAMuB,SAA4B,EAAA;AAElC,QAAA,MAAMC,SACJL,GAAAA,UAAAA,CAAWM,KACVzB,KAAAA,KAAAA,CAAM0B,SACH,IAAKC,CAAAA,aAAAA,CAAc3B,KAAOO,EAAAA,GAAAA,IAC1BqB,gBAAiB,CAAA,IAAA,CAAKC,OAAQ7B,CAAAA,KAAAA,EAAOO,GAAAA,CAAAA,CAAAA,CAAAA;AAE3C,QAAMuB,MAAAA,UAAAA,GAAa,IAAIC,eAAAA,EAAAA;AACvB,QAAA,WAAA,MAAiBN,SAASD,SAAW,EAAA;AACnCD,UAAAA,MAAAA,CAAOS,KAAKP,KAAAA,CAAAA;AACZ,UAAMlB,MAAAA,GAAAA,CAAIc,OAAQC,CAAAA,IAAAA,CAAK,UAAY,EAAA;AACjCG,YAAAA,KAAAA;YACAQ,SAAW,EAAA;cAAEC,KAAO,kBAAA,MAAA,CAAA,MAAMJ,UAAWI,CAAAA,KAAAA,EAAjB,EAAA,OAAA;AAAyB;WAC/C,CAAA;AACA,UAAIJ,IAAAA,UAAAA,CAAWzB,OAAO8B,OAAS,EAAA;AAC7B,YAAA;AACF;AACF;AAEAhB,QAAAA,UAAAA,CAAWiB,QAAQb,MAAAA,CAAAA;AACnB,QAAMc,MAAAA,MAAAA,GAASC,eAAgBC,CAAAA,UAAAA,CAAWhB,MAAAA,CAAAA;AAE1C,QAAA,IAAId,8BAAkCE,IAAAA,OAAAA,CAAQ0B,MAAOG,CAAAA,YAAAA,EAAY,CAAK,EAAA;AACpE,UAAA,MAAMC,OAAUJ,GAAAA,MAAAA,CAAOK,QAASC,CAAAA,EAAAA,CAAG,CAAC,CAAA,CAAA;AACpC,UAAMC,MAAAA,QAAAA,GAAWC,eAAgBJ,CAAAA,OAAAA,CAAQK,IAAI,CAAA;AAC7C,UAAA,IAAI,CAACF,QAAU,EAAA;AACb,YAAA,MAAM,IAAIG,cACR,CAAA,CAAA,sDAAA,EAAyDN,QAAQK,IAAI,CAAA,CAAA,EACrE,EACA,EAAA;cACEE,OAAS,EAAA,IAAA;cACTC,WAAa,EAAA;aACf,CAAA;AAEJ;AACAR,UAAAA,OAAAA,CAAQS,QAAQC,MAAS,GAAA,CAAA;AACzBV,UAAAA,OAAAA,CAAQS,QAAQlB,IAAK,CAAA;YACnBoB,IAAM,EAAA,WAAA;AACNC,YAAAA,UAAAA,EAAY,CAAQC,KAAAA,EAAAA,YAAAA,CAAa,CAAA,CAAA,CAAGC,aAAW,CAAA,CAAA;AAC/CC,YAAAA,QAAAA,EAAUZ,QAASlD,CAAAA,IAAAA;;AACnB+D,YAAAA,IAAAA,EAAMb,QAASvD,CAAAA;WACjB,CAAA;AACF;AAEA,QAAMkB,MAAAA,GAAAA,CAAIc,OAAQC,CAAAA,IAAAA,CAAK,SAAW,EAAA;UAAEG,KAAOY,EAAAA;SAAO,CAAA;AAClD,QAAOA,OAAAA,MAAAA;AACT,OAAA,CAAA,OAASqB,KAAO,EAAA;AACd,QAAMnD,MAAAA,GAAAA,CAAIc,OAAQC,CAAAA,IAAAA,CAAK,OAAS,EAAA;AAAEtB,UAAAA,KAAAA;AAAO0D,UAAAA;SAAM,CAAA;AAC/C,QAAMvC,MAAAA,UAAAA,CAAWwC,OAAOD,KAAAA,CAAAA;AACxB,QAAA,IAAIA,iBAAiBX,cAAgB,EAAA;AACnC,UAAMW,MAAAA,KAAAA;SACD,MAAA;AACL,UAAM,MAAA,IAAIX,eAAe,CAA4C,wCAAA,CAAA,EAAA;AAACW,YAAAA;AAAM,WAAA,CAAA;AAC9E;OACF,SAAA;AACE,QAAA,MAAMnD,GAAIc,CAAAA,OAAAA,CAAQC,IAAK,CAAA,QAAA,EAAU,IAAA,CAAA;AACnC;KACF,CAAA;AAEJ;AAEAsC,EAAAA,eAAAA,CAAmB5D,KAAgC,EAAA;AACjD,IAAOE,OAAAA,UAAAA,CAAWC,MAChB,IACA,EAAA;MAAEC,MAAQ,EAAA;AAACJ,QAAAA;;AAAiBK,MAAAA,MAAAA,EAAQL,KAAOM,EAAAA;AAAY,KAAA,EACvD,OAAOC,GAAAA,KAAAA;AACL,MAAA,OAAO,MAAM,IAAA,CAAKsD,gBAAoB7D,CAAAA,KAAAA,EAAOO,GAAAA,CAAAA;KAC/C,CAAA;AAEJ;EAEAuD,MAAO,CAAA,EAAE3E,KAAOE,EAAAA,UAAAA,EAAgC,EAAA;AAC9C,IAAA,IAAIF,KAAO,EAAA;AACT,MAAA,IAAA,CAAKA,QAAQ4E,UAAW5E,CAAAA,KAAAA,IAASA,KAAM,CAAA,IAAA,CAAKA,KAAK,CAAIA,GAAAA,KAAAA;AACvD;AACA,IAAA,IAAIE,UAAY,EAAA;AACd,MAAA,IAAA,CAAKA,aAAa0E,UAAW1E,CAAAA,UAAAA,IAAcA,UAAW,CAAA,IAAA,CAAKA,UAAU,CAAIA,GAAAA,UAAAA;AAC3E;AACF;EAEA,aAAa2E,QAAAA,CAAStE,MAAoCuE,OAA+B,EAAA;AACvF,IAAA,MAAM,EAAEC,UAAAA,EAAYC,OAAO,EAAA,GAAKC,WAAW1E,IAAAA,CAAAA;AAC3C,IAAA,MAAM2E,MAAS,GAAA,MAAMC,SAAqBJ,CAAAA,UAAAA,EAAY,MAAA,CAAA;AACtD,IAAA,OAAO,IAAIG,MAAAA,CAAOF,OAAWnD,IAAAA,MAAAA,EAAWiD,OAAAA,CAAAA;AAC1C;EAWA,MAAgBJ,gBAAAA,CACd7D,OACAO,GACmC,EAAA;AACnC,IAAA,MAAM,EAAEgE,MAAAA,EAAQ,GAAGN,OAAAA,EAAYjE,GAAAA,KAAAA;AAC/B,IAAMwE,MAAAA,UAAAA,GAAaC,aAAaF,MAAAA,CAAAA;AAEhC,IAAA,MAAMG,cACJ1E,GAAAA,KAAAA,CAAM2E,oBACN,IAAA,IAAIC,cAAe,CAAA;AACjBL,MAAAA,MAAAA,EAAQM,EAAEC,MAAO,CAAA;AACfP,QAAAA,MAAAA,EAAQM,CAAEE,CAAAA,MAAAA,EAASC,CAAAA,GAAAA,CAAI,CAAA;OACzB,CAAA;MACAC,QAAU,EAAA,CAAA;;;;;;;KAOZ,CAAA;AAEF,IAAA,MAAMvC,QAAsB,GAAA;MAC1B,IAAIwC,aAAAA,CAAcR,eAAeS,MAAO,CAAA;AAAEZ,QAAAA,MAAAA,EAAQa,IAAKC,CAAAA,SAAAA,CAAUb,UAAY,EAAA,IAAA,EAAM,CAAA;AAAG,OAAA,CAAA,CAAA;SACnFxE,KAAM0C,CAAAA;;AAGX,IAAM4C,MAAAA,aAAAA,GAAgB,IAAIV,cAAe,CAAA;AACvCL,MAAAA,MAAAA,EAAQM,EAAEC,MAAO,CAAA;AACfS,QAAAA,MAAAA,EAAQV,EAAEE,MAAM,EAAA;AAChBS,QAAAA,QAAAA,EAAUX,EAAEE,MAAM,EAAA;AAClBU,QAAAA,QAAAA,EAAUZ,EAAEE,MAAM;OACpB,CAAA;MACAE,QAAU,EAAA,CAAA;;;KAGZ,CAAA;AAEA,IAAA,OAAO,IAAIS,SAAoC,CAAA;AAC7CC,MAAAA,QAAAA,kBAAU,MAAA,CAAA,YAAA;AACR,QAAMC,MAAAA,QAAAA,GAAW,MAAM,IAAA,CAAK/D,OAC1B,CAAA;UACE,GAAGoC,OAAAA;AACHvB,UAAAA,QAAAA;UACA9B,cAAgB,EAAA;YAAEwC,IAAM,EAAA;AAAc;AACxC,SAAA,EACA7C,GAAAA,CAAAA;AAGF,QAAMsF,MAAAA,YAAAA,GAAeD,SAASE,cAAc,EAAA;AAC5C,QAAMhB,MAAAA,MAAAA,GAAYjC,gBAAgBgD,YAAc,EAAA;UAAEE,IAAM,EAAA;AAAC,YAAA,GAAA;AAAK,YAAA;;SAAK,CAAA;AACnE,QAAMC,MAAAA,SAAAA,GAAYC,sBAAsB1B,MAAAA,CAAAA;AAExC,QAAM2B,MAAAA,OAAAA,GAAUF,UAAUlB,MAAAA,CAAAA;AAC1B,QAAA,IAAI,CAACoB,OAAS,EAAA;AACZ,UAAA,MAAMC,OAAU,GAAA;YACdX,QAAUJ,EAAAA,IAAAA,CAAKC,UAAUb,UAAAA,CAAAA;YACzBiB,QAAUI,EAAAA,YAAAA;AACVN,YAAAA,MAAAA,EAAQH,IAAKC,CAAAA,SAAAA,CAAUW,SAAUT,CAAAA,MAAAA,IAAU,EAAE;AAC/C,WAAA;AAEA7C,UAAAA,QAAAA,CAASV,KAAK,IAAIoE,WAAAA,CAAYd,cAAcH,MAAOgB,CAAAA,OAAAA,CAAAA,CAAAA,CAAAA;AACnD,UAAA,MAAM,IAAIpD,cAAAA,CAAe,CAAuC,mCAAA,CAAA,EAAA,EAAI,EAAA;AAClEoD,YAAAA;WACF,CAAA;AACF;AAEA,QAAO,OAAA;AACLrB,UAAAA,MAAAA;UACAuB,MAAQT,EAAAA;AACV,SAAA;OA/BQ,EAAA,UAAA,CAAA;MAiCV9B,MAAQ,EAAA;AACNzD,QAAAA,MAAAA,EAAQE,GAAIF,CAAAA,MAAAA;AACZiG,QAAAA,UAAAA,EAAYtG,OAAOsG,UAAc,IAAA;AACnC;AACF,KAAA,EAAGC,GAAG,EAAA;AACR;EAEAC,cAAiB,GAAA;AACf,IAAO,OAAA;AACLrH,MAAAA,KAAAA,EAAO,IAAKA,CAAAA,KAAAA;AACZkC,MAAAA,OAAAA,EAAS,IAAKA,CAAAA,OAAAA;MACdhC,UAAYY,EAAAA,WAAAA,CAAY,KAAKZ,UAAU,CAAA;AACvCC,MAAAA,MAAAA,EAAQ,IAAKA,CAAAA,MAAAA;MACbM,iBAAmB,EAAA,IAAA,CAAKA,kBAAkB6G,KAAK,EAAA;AAC/C5G,MAAAA,iCAAAA,EAAmC,IAAKA,CAAAA,iCAAAA;AACxCC,MAAAA,wBAAAA,EAA0B,IAAKA,CAAAA;AACjC,KAAA;AACF;EAEA4G,OAAU,GAAA;AACR,IAAA,IAAA,CAAKrF,QAAQqF,OAAO,EAAA;AACtB;EAEA,MAAgBtF,mBAAAA,CAAoB,EAClCd,WAAAA,EAAaqG,CACbjE,EAAAA,QAAAA,EACAlC,QAAQ,EAAA,EACR,GAAGR,KAAAA,EACc,EAAA;AACjB,IAAA,MAAM4G,MAAMC,eAAgB,CAAA;MAC1B,GAAG7G,KAAAA;MACH0C,QAAU,EAAA,MAAMoE,UAAWC,CAAAA,SAAAA,CAAUrE,QAASsE,CAAAA,GAAAA,CAAI,CAACC,GAAQA,KAAAA,GAAAA,CAAIC,OAAO,EAAA,CAAA,CAAA;MACtE1G,KAAO,EAAA,MAAMsG,UAAWC,CAAAA,SAAAA,CAAUvG,KAAAA;KACpC,CAAA;AACA,IAAA,MAAMiB,KAAQ,GAAA,MAAM,IAAKtC,CAAAA,KAAAA,CAAMoH,IAAIK,GAAAA,CAAAA;AACnC,IAAA,MAAMO,QAAQ1F,KAAUT,KAAAA,MAAAA;AAExB,IAAA,IAAIoG,IAAuC,GAAA,IAAA;AAC3C,IAAA,IAAID,KAAO,EAAA;AACTC,MAAAA,IAAAA,GAAO,IAAIC,IAAAA,EAAAA;AACX,MAAA,MAAM,IAAKlI,CAAAA,KAAAA,CAAMmI,GAAIV,CAAAA,GAAAA,EAAKQ,IAAAA,CAAAA;AAC5B;AAEA,IAAO,OAAA;AACLR,MAAAA,GAAAA;AACAnF,MAAAA,KAAAA;AACAW,MAAAA,OAAAA,0BAAsCX,MAAAA,KAAAA;AACpC2F,QAAAA,IAAAA,EAAMhF,UAAUX,MAAAA,CAAAA;OADT,EAAA,SAAA,CAAA;AAGTkC,MAAAA,MAAAA,gCAAeD,KAAAA,KAAAA;AACb0D,QAAAA,IAAAA,EAAMzD,SAASD,KAAAA,CAAAA;AACf,QAAA,IAAIyD,KAAO,EAAA;AACT,UAAM,MAAA,IAAA,CAAKhI,KAAMoI,CAAAA,MAAAA,CAAOX,GAAAA,CAAAA;AAC1B;OAJM,EAAA,QAAA;AAMV,KAAA;AACF;AAEUlG,EAAAA,oCAAAA,CAAqC,EAC7CF,KAAQ,GAAA,EACRO,EAAAA,UAAAA,EACAH,gBACiB,EAAA;AACjB,IAAA,IACED,OAAQH,CAAAA,KAAAA,CACR,IAAA,CAACO,cACDA,UAAe,KAAA,MAAA,IACfA,UAAe,KAAA,MAAA,IACf,CAAC,IAAA,CAAKlB,iCACN2H,IAAAA,OAAAA,CAAQ5G,cAAAA,CACR,EAAA;AACA,MAAO,OAAA,KAAA;AACT;AAEA,IAAM6G,MAAAA,mBAAAA,GAAsB,IAAKxG,CAAAA,qBAAAA,CAAsBF,UAAAA,CAAAA;AACvD,IAAO,OAAA,CAAC,IAAKjB,CAAAA,wBAAAA,IAA4B,CAAC2H,mBAAAA;AAC5C;AAEUxG,EAAAA,qBAAAA,CAAsByG,MAAuC,EAAA;AACrE,IAAA,OACE,CAACA,MAAAA,KACAA,MAAkBC,YAAAA,IAAAA,GACf,IAAK/H,CAAAA,iBAAAA,CAAkBgI,QAAS,CAAA,QAAA,CAChC,GAAA,IAAA,CAAKhI,iBAAkBgI,CAAAA,QAAAA,CAASF,MAAAA,CAAAA,CAAAA;AAExC;AACF;AAEO,MAAMpF,wBAAwBpD,YAAAA,CAAAA;EAvbrC;;;;;;EAwbES,WACkB+C,CAAAA,QAAAA,EACTmF,OACAC,YACP,EAAA;AACA,IAAK,KAAA,EAAA,EAAA,KAJWpF,QAAAA,GAAAA,QAAAA,EAAAA,KACTmF,KAAAA,GAAAA,KAAAA,EAAAA,KACAC,YAAAA,GAAAA,YAAAA;AAGT;AAEA,EAAA,OAAOvF,WAAWhB,MAA2B,EAAA;AAC3C,IAAA,MAAMwG,KAAQ,GAAA,IAAIzF,eAAgB,CAAA,EAAE,CAAA;AACpCf,IAAAA,MAAAA,CAAOyG,QAAQ,CAACC,GAAAA,KAAQF,KAAMG,CAAAA,KAAAA,CAAMD,GAAAA,CAAAA,CAAAA;AACpC,IAAOF,OAAAA,KAAAA;AACT;AAEAG,EAAAA,KAAAA,CAAMC,KAAwB,EAAA;AAC5B,IAAA,IAAA,CAAKzF,QAASV,CAAAA,IAAAA,CAAI,GAAImG,KAAAA,CAAMzF,QAAQ,CAAA;AACpC,IAAA,IAAA,CAAKoF,eAAeK,KAAML,CAAAA,YAAAA;AAC1B,IAAI,IAAA,IAAA,CAAKD,KAASM,IAAAA,KAAAA,CAAMN,KAAO,EAAA;AAC7B,MAAA,IAAA,CAAKA,QAAQO,WAAY,CAAA;QAAC,IAAKP,CAAAA,KAAAA;QAAOM,KAAMN,CAAAA;AAAQ,OAAA,EAAA;QAClDQ,WAAaC,EAAAA,UAAAA;QACbC,YAAcD,EAAAA,UAAAA;QACdE,gBAAkBF,EAAAA;OACpB,CAAA;AACF,KAAA,MAAA,IAAWH,MAAMN,KAAO,EAAA;AACtB,MAAKA,IAAAA,CAAAA,KAAAA,GAAQ5H,WAAYkI,CAAAA,KAAAA,CAAMN,KAAK,CAAA;AACtC;AACF;EAEArF,YAAe,GAAA;AACb,IAAA,OAAO,KAAKE,QACT+F,CAAAA,MAAAA,CAAO,CAACC,CAAAA,KAAMA,aAAaC,gBAAAA,CAAAA,CAC3BC,OAAQ,CAAA,CAACF,MAAMA,CAAElG,CAAAA,YAAAA,EAAY,CAAA,CAC7BiG,OAAOjB,OAAAA,CAAAA;AACZ;EAEAqB,eAAsC,GAAA;AACpC,IAAA,OAAO,IAAKnG,CAAAA,QAAAA,CAAS+F,MAAO,CAAA,CAACC,CAAMA,KAAAA,CAAAA,YAAaC,gBAAAA,CAAAA,CAAkBF,MAAO,CAAA,CAACC,CAAMA,KAAAA,CAAAA,CAAE5F,IAAI,CAAA;AACxF;EAEAgD,cAAyB,GAAA;AACvB,IAAA,OAAO,KAAKpD,QACT+F,CAAAA,MAAAA,CAAO,CAACC,CAAMA,KAAAA,CAAAA,YAAaC,gBAAAA,CAC3BC,CAAAA,OAAAA,CAAQ,CAACF,CAAAA,KAAMA,EAAE5F,IAAI,CAAA,CACrB2F,OAAOjB,OAAAA,CAAAA,CACPsB,KAAK,EAAA,CAAA;AACV;EAEAC,QAAW,GAAA;AACT,IAAA,OAAO,KAAKjD,cAAc,EAAA;AAC5B;EAEAU,cAAiB,GAAA;AACf,IAAO,OAAA;MACL9D,QAAUzC,EAAAA,WAAAA,CAAY,KAAKyC,QAAQ,CAAA;MACnCmF,KAAO5H,EAAAA,WAAAA,CAAY,KAAK4H,KAAK,CAAA;AAC7BC,MAAAA,YAAAA,EAAc,IAAKA,CAAAA;AACrB,KAAA;AACF;AAEAkB,EAAAA,YAAAA,CAAaC,QAAkD,EAAA;AAC7DC,IAAOC,MAAAA,CAAAA,MAAAA,CAAO,MAAMF,QAAAA,CAAAA;AACtB;AACF","file":"chat.js","sourcesContent":["/**\n * Copyright 2025 © BeeAI a Series of LF Projects, LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Serializable } from \"@/internals/serializable.js\";\nimport { shallowCopy } from \"@/serializer/utils.js\";\nimport { customMerge } from \"@/internals/helpers/object.js\";\nimport { takeBigger } from \"@/internals/helpers/number.js\";\nimport { Callback } from \"@/emitter/types.js\";\nimport { FrameworkError } from \"@/errors.js\";\nimport { Emitter } from \"@/emitter/emitter.js\";\nimport { GetRunContext, RunContext } from \"@/context.js\";\nimport { isEmpty, isFunction, randomString } from \"remeda\";\nimport { ObjectHashKeyFn } from \"@/cache/decoratorCache.js\";\nimport { Task } from \"promise-based-task\";\nimport { NullCache } from \"@/cache/nullCache.js\";\nimport { BaseCache } from \"@/cache/base.js\";\nimport {\n  filterToolsByToolChoice,\n  FullModelName,\n  generateToolUnionSchema,\n  loadModel,\n  parseModel,\n} from \"@/backend/utils.js\";\nimport { ProviderName } from \"@/backend/constants.js\";\nimport { AnyTool, Tool } from \"@/tools/base.js\";\nimport { AssistantMessage, Message, SystemMessage, UserMessage } from \"@/backend/message.js\";\n\nimport { ChatModelError } from \"@/backend/errors.js\";\nimport { z, ZodSchema, ZodType } from \"zod\";\nimport {\n  createSchemaValidator,\n  parseBrokenJson,\n  toJsonSchema,\n} from \"@/internals/helpers/schema.js\";\nimport { Retryable } from \"@/internals/helpers/retryable.js\";\nimport { SchemaObject, ValidateFunction } from \"ajv\";\nimport { PromptTemplate } from \"@/template.js\";\nimport { toAsyncGenerator } from \"@/internals/helpers/promise.js\";\nimport { Serializer } from \"@/serializer/serializer.js\";\nimport { Logger } from \"@/logger/logger.js\";\n\nexport interface ChatModelParameters {\n  maxTokens?: number;\n  topP?: number;\n  frequencyPenalty?: number;\n  temperature?: number;\n  topK?: number;\n  n?: number;\n  presencePenalty?: number;\n  seed?: number;\n  stopSequences?: string[];\n}\n\ninterface ResponseObjectJson {\n  type: \"object-json\";\n  schema?: SchemaObject;\n  name?: string;\n  description?: string;\n}\n\nexport interface ChatModelObjectInput<T> extends ChatModelParameters {\n  schema: z.ZodSchema<T> | ResponseObjectJson;\n  systemPromptTemplate?: PromptTemplate<ZodType<{ schema: string }>>;\n  messages: Message[];\n  abortSignal?: AbortSignal;\n  maxRetries?: number;\n}\n\nexport interface ChatModelObjectOutput<T> {\n  object: T;\n  output: ChatModelOutput;\n}\n\nexport type ChatModelToolChoice = \"auto\" | \"none\" | \"required\" | AnyTool;\n\nexport interface ChatModelInput extends ChatModelParameters {\n  tools?: AnyTool[];\n  abortSignal?: AbortSignal;\n  stopSequences?: string[];\n  responseFormat?: ZodSchema | ResponseObjectJson;\n  toolChoice?: ChatModelToolChoice;\n  messages: Message[];\n}\n\nexport type ChatModelFinishReason =\n  | \"stop\"\n  | \"length\"\n  | \"content-filter\"\n  | \"tool-calls\"\n  | \"error\"\n  | \"other\"\n  | \"unknown\";\n\nexport interface ChatModelUsage {\n  promptTokens: number;\n  completionTokens: number;\n  totalTokens: number;\n}\n\nexport interface ChatModelEvents {\n  newToken?: Callback<{ value: ChatModelOutput; callbacks: { abort: () => void } }>;\n  success?: Callback<{ value: ChatModelOutput }>;\n  start?: Callback<{ input: ChatModelInput }>;\n  error?: Callback<{ input: ChatModelInput; error: FrameworkError }>;\n  finish?: Callback<null>;\n}\n\nexport type ChatModelEmitter<A = Record<never, never>> = Emitter<\n  ChatModelEvents & Omit<A, keyof ChatModelEvents>\n>;\n\nexport type ChatModelCache = BaseCache<Task<ChatModelOutput[]>>;\nexport type ConfigFn<T> = (value: T) => T;\nexport interface ChatConfig {\n  cache?: ChatModelCache | ConfigFn<ChatModelCache>;\n  parameters?: ChatModelParameters | ConfigFn<ChatModelParameters>;\n}\n\nexport type ChatModelToolChoiceSupport = \"required\" | \"none\" | \"single\" | \"auto\";\n\nexport abstract class ChatModel extends Serializable {\n  public abstract readonly emitter: Emitter<ChatModelEvents>;\n  public cache: ChatModelCache = new NullCache();\n  public parameters: ChatModelParameters = {};\n  protected readonly logger = Logger.root.child({\n    name: this.constructor.name,\n  });\n\n  public readonly toolChoiceSupport: ChatModelToolChoiceSupport[] = [\n    \"required\",\n    \"none\",\n    \"single\",\n    \"auto\",\n  ];\n  public toolCallFallbackViaResponseFormat = true;\n  public readonly modelSupportsToolCalling: boolean = true;\n\n  abstract get modelId(): string;\n  abstract get providerId(): string;\n\n  create(input: ChatModelInput & { stream?: boolean }) {\n    input = shallowCopy(input);\n\n    return RunContext.enter(\n      this,\n      { params: [input] as const, signal: input?.abortSignal },\n      async (run) => {\n        if (!this.modelSupportsToolCalling) {\n          input.tools = [];\n        }\n\n        const forceToolCallViaResponseFormat = this.shouldForceToolCallViaResponseFormat(input);\n        if (forceToolCallViaResponseFormat && input.tools && !isEmpty(input.tools)) {\n          input.responseFormat = await generateToolUnionSchema(\n            filterToolsByToolChoice(input.tools, input.toolChoice),\n          );\n          input.toolChoice = undefined;\n        }\n\n        if (!this.isToolChoiceSupported(input.toolChoice)) {\n          this.logger.warn(\n            `The following tool choice value '${input.toolChoice}' is not supported. Ignoring.`,\n          );\n          input.toolChoice = undefined;\n        }\n\n        const cacheEntry = await this.createCacheAccessor(input);\n\n        try {\n          await run.emitter.emit(\"start\", { input });\n          const chunks: ChatModelOutput[] = [];\n\n          const generator =\n            cacheEntry.value ??\n            (input.stream\n              ? this._createStream(input, run)\n              : toAsyncGenerator(this._create(input, run)));\n\n          const controller = new AbortController();\n          for await (const value of generator) {\n            chunks.push(value);\n            await run.emitter.emit(\"newToken\", {\n              value,\n              callbacks: { abort: () => controller.abort() },\n            });\n            if (controller.signal.aborted) {\n              break;\n            }\n          }\n\n          cacheEntry.resolve(chunks);\n          const result = ChatModelOutput.fromChunks(chunks);\n\n          if (forceToolCallViaResponseFormat && isEmpty(result.getToolCalls())) {\n            const lastMsg = result.messages.at(-1)!;\n            const toolCall = parseBrokenJson(lastMsg.text);\n            if (!toolCall) {\n              throw new ChatModelError(\n                `Failed to produce a valid tool call. Generate output: ${lastMsg.text}`,\n                [],\n                {\n                  isFatal: true,\n                  isRetryable: false,\n                },\n              );\n            }\n            lastMsg.content.length = 0;\n            lastMsg.content.push({\n              type: \"tool-call\",\n              toolCallId: `call_${randomString(8).toLowerCase()}`,\n              toolName: toolCall.name, // todo: add types\n              args: toolCall.parameters,\n            });\n          }\n\n          await run.emitter.emit(\"success\", { value: result });\n          return result;\n        } catch (error) {\n          await run.emitter.emit(\"error\", { input, error });\n          await cacheEntry.reject(error);\n          if (error instanceof ChatModelError) {\n            throw error;\n          } else {\n            throw new ChatModelError(`The Chat Model has encountered an error.`, [error]);\n          }\n        } finally {\n          await run.emitter.emit(\"finish\", null);\n        }\n      },\n    );\n  }\n\n  createStructure<T>(input: ChatModelObjectInput<T>) {\n    return RunContext.enter(\n      this,\n      { params: [input] as const, signal: input?.abortSignal },\n      async (run) => {\n        return await this._createStructure<T>(input, run);\n      },\n    );\n  }\n\n  config({ cache, parameters }: ChatConfig): void {\n    if (cache) {\n      this.cache = isFunction(cache) ? cache(this.cache) : cache;\n    }\n    if (parameters) {\n      this.parameters = isFunction(parameters) ? parameters(this.parameters) : parameters;\n    }\n  }\n\n  static async fromName(name: FullModelName | ProviderName, options?: ChatModelParameters) {\n    const { providerId, modelId } = parseModel(name);\n    const Target = await loadModel<ChatModel>(providerId, \"chat\");\n    return new Target(modelId || undefined, options);\n  }\n\n  protected abstract _create(\n    input: ChatModelInput,\n    run: GetRunContext<typeof this>,\n  ): Promise<ChatModelOutput>;\n  protected abstract _createStream(\n    input: ChatModelInput,\n    run: GetRunContext<typeof this>,\n  ): AsyncGenerator<ChatModelOutput, void>;\n\n  protected async _createStructure<T>(\n    input: ChatModelObjectInput<T>,\n    run: GetRunContext<typeof this>,\n  ): Promise<ChatModelObjectOutput<T>> {\n    const { schema, ...options } = input;\n    const jsonSchema = toJsonSchema(schema);\n\n    const systemTemplate =\n      input.systemPromptTemplate ??\n      new PromptTemplate({\n        schema: z.object({\n          schema: z.string().min(1),\n        }),\n        template: `You are a helpful assistant that generates only valid JSON adhering to the following JSON Schema.\n\n\\`\\`\\`\n{{schema}}\n\\`\\`\\`\n\nIMPORTANT: You MUST answer with a JSON object that matches the JSON schema above.`,\n      });\n\n    const messages: Message[] = [\n      new SystemMessage(systemTemplate.render({ schema: JSON.stringify(jsonSchema, null, 2) })),\n      ...input.messages,\n    ];\n\n    const errorTemplate = new PromptTemplate({\n      schema: z.object({\n        errors: z.string(),\n        expected: z.string(),\n        received: z.string(),\n      }),\n      template: `Generated object does not match the expected JSON schema!\n\nValidation Errors: {{errors}}`,\n    });\n\n    return new Retryable<ChatModelObjectOutput<T>>({\n      executor: async () => {\n        const response = await this._create(\n          {\n            ...options,\n            messages,\n            responseFormat: { type: \"object-json\" },\n          },\n          run,\n        );\n\n        const textResponse = response.getTextContent();\n        const object: T = parseBrokenJson(textResponse, { pair: [\"{\", \"}\"] });\n        const validator = createSchemaValidator(schema) as ValidateFunction<T>;\n\n        const success = validator(object);\n        if (!success) {\n          const context = {\n            expected: JSON.stringify(jsonSchema),\n            received: textResponse,\n            errors: JSON.stringify(validator.errors ?? []),\n          };\n\n          messages.push(new UserMessage(errorTemplate.render(context)));\n          throw new ChatModelError(`LLM did not produce a valid output.`, [], {\n            context,\n          });\n        }\n\n        return {\n          object,\n          output: response,\n        };\n      },\n      config: {\n        signal: run.signal,\n        maxRetries: input?.maxRetries || 1,\n      },\n    }).get();\n  }\n\n  createSnapshot() {\n    return {\n      cache: this.cache,\n      emitter: this.emitter,\n      parameters: shallowCopy(this.parameters),\n      logger: this.logger,\n      toolChoiceSupport: this.toolChoiceSupport.slice(),\n      toolCallFallbackViaResponseFormat: this.toolCallFallbackViaResponseFormat,\n      modelSupportsToolCalling: this.modelSupportsToolCalling,\n    };\n  }\n\n  destroy() {\n    this.emitter.destroy();\n  }\n\n  protected async createCacheAccessor({\n    abortSignal: _,\n    messages,\n    tools = [],\n    ...input\n  }: ChatModelInput) {\n    const key = ObjectHashKeyFn({\n      ...input,\n      messages: await Serializer.serialize(messages.map((msg) => msg.toPlain())),\n      tools: await Serializer.serialize(tools),\n    });\n    const value = await this.cache.get(key);\n    const isNew = value === undefined;\n\n    let task: Task<ChatModelOutput[]> | null = null;\n    if (isNew) {\n      task = new Task();\n      await this.cache.set(key, task);\n    }\n\n    return {\n      key,\n      value,\n      resolve: <T2 extends ChatModelOutput>(value: T2[]) => {\n        task?.resolve?.(value);\n      },\n      reject: async (error: Error) => {\n        task?.reject?.(error);\n        if (isNew) {\n          await this.cache.delete(key);\n        }\n      },\n    };\n  }\n\n  protected shouldForceToolCallViaResponseFormat({\n    tools = [],\n    toolChoice,\n    responseFormat,\n  }: ChatModelInput) {\n    if (\n      isEmpty(tools) ||\n      !toolChoice ||\n      toolChoice === \"none\" ||\n      toolChoice === \"auto\" ||\n      !this.toolCallFallbackViaResponseFormat ||\n      Boolean(responseFormat)\n    ) {\n      return false;\n    }\n\n    const toolChoiceSupported = this.isToolChoiceSupported(toolChoice);\n    return !this.modelSupportsToolCalling || !toolChoiceSupported;\n  }\n\n  protected isToolChoiceSupported(choice?: ChatModelToolChoice): boolean {\n    return (\n      !choice ||\n      (choice instanceof Tool\n        ? this.toolChoiceSupport.includes(\"single\")\n        : this.toolChoiceSupport.includes(choice))\n    );\n  }\n}\n\nexport class ChatModelOutput extends Serializable {\n  constructor(\n    public readonly messages: Message[],\n    public usage?: ChatModelUsage,\n    public finishReason?: ChatModelFinishReason,\n  ) {\n    super();\n  }\n\n  static fromChunks(chunks: ChatModelOutput[]) {\n    const final = new ChatModelOutput([]);\n    chunks.forEach((cur) => final.merge(cur));\n    return final;\n  }\n\n  merge(other: ChatModelOutput) {\n    this.messages.push(...other.messages);\n    this.finishReason = other.finishReason;\n    if (this.usage && other.usage) {\n      this.usage = customMerge([this.usage, other.usage], {\n        totalTokens: takeBigger,\n        promptTokens: takeBigger,\n        completionTokens: takeBigger,\n      });\n    } else if (other.usage) {\n      this.usage = shallowCopy(other.usage);\n    }\n  }\n\n  getToolCalls() {\n    return this.messages\n      .filter((r) => r instanceof AssistantMessage)\n      .flatMap((r) => r.getToolCalls())\n      .filter(Boolean);\n  }\n\n  getTextMessages(): AssistantMessage[] {\n    return this.messages.filter((r) => r instanceof AssistantMessage).filter((r) => r.text);\n  }\n\n  getTextContent(): string {\n    return this.messages\n      .filter((r) => r instanceof AssistantMessage)\n      .flatMap((r) => r.text)\n      .filter(Boolean)\n      .join(\"\");\n  }\n\n  toString() {\n    return this.getTextContent();\n  }\n\n  createSnapshot() {\n    return {\n      messages: shallowCopy(this.messages),\n      usage: shallowCopy(this.usage),\n      finishReason: this.finishReason,\n    };\n  }\n\n  loadSnapshot(snapshot: ReturnType<typeof this.createSnapshot>) {\n    Object.assign(this, snapshot);\n  }\n}\n"]}